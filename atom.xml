<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WSC_ZOU_Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://WSCZou.com/"/>
  <updated>2018-06-20T10:36:40.366Z</updated>
  <id>http://WSCZou.com/</id>
  
  <author>
    <name>WSC_ZOU</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>高数</title>
    <link href="http://WSCZou.com/2018/06/11/%E9%AB%98%E6%95%B0/"/>
    <id>http://WSCZou.com/2018/06/11/高数/</id>
    <published>2018-06-11T08:29:19.000Z</published>
    <updated>2018-06-20T10:36:40.366Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微分方程"><a href="#微分方程" class="headerlink" title="微分方程"></a>微分方程</h1><p>通解不一定是所有解（lnc的例子）</p><h2 id="变量可分离"><a href="#变量可分离" class="headerlink" title="变量可分离"></a>变量可分离</h2><h2 id="齐次："><a href="#齐次：" class="headerlink" title="齐次："></a>齐次：</h2><p>把y看成自变量</p><p>设x\y=u时记得结果回代</p><h2 id="一阶线性公式法"><a href="#一阶线性公式法" class="headerlink" title="一阶线性公式法"></a>一阶线性公式法</h2><h2 id="二阶常系数线性齐次方程"><a href="#二阶常系数线性齐次方程" class="headerlink" title="二阶常系数线性齐次方程"></a>二阶常系数线性齐次方程</h2><p>三角函数 特征方程а（e的次方数）+ui=r1(or r2) k=1，Pm()cosux+Qn(x)sinux m,n选两者最大的次数作为一般方程次数</p><h2 id="y通-y齐通-y非齐特"><a href="#y通-y齐通-y非齐特" class="headerlink" title="y通=y齐通+y非齐特"></a>y通=y齐通+y非齐特</h2><h1 id="多元微分学"><a href="#多元微分学" class="headerlink" title="多元微分学"></a>多元微分学</h1><h2 id="链式求导规则"><a href="#链式求导规则" class="headerlink" title="链式求导规则"></a>链式求导规则</h2><h2 id="偏导数"><a href="#偏导数" class="headerlink" title="偏导数"></a>偏导数</h2><h2 id="极最值"><a href="#极最值" class="headerlink" title="极最值"></a>极最值</h2><p>（无条件极值（大同小异只适用于二元），条件极（最）值）</p><h1 id="平面及方程"><a href="#平面及方程" class="headerlink" title="平面及方程"></a>平面及方程</h1><p>3x-7y+5z-12=0的平面法向量为(3,-7,5)</p><p>方程中只有x或y或z表示与之垂直的平面</p><p>方程中缺少一个变量则与之平行</p><p><img src="C:\Users\12143\Pictures\Saved Pictures\TIM图片20180620132008.png" alt="TIM图片20180620132008"></p><p><img src="C:\Users\12143\Pictures\Saved Pictures\TIM图片20180620132127.png" alt="TIM图片20180620132127"></p><p>两平面的叉乘为相交直线的方向向量<img src="C:\Users\12143\Pictures\Saved Pictures\TIM图片20180620133802.png" alt="TIM图片20180620133802"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微分方程&quot;&gt;&lt;a href=&quot;#微分方程&quot; class=&quot;headerlink&quot; title=&quot;微分方程&quot;&gt;&lt;/a&gt;微分方程&lt;/h1&gt;&lt;p&gt;通解不一定是所有解（lnc的例子）&lt;/p&gt;
&lt;h2 id=&quot;变量可分离&quot;&gt;&lt;a href=&quot;#变量可分离&quot; class=&quot;h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据分析入门</title>
    <link href="http://WSCZou.com/2018/05/28/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%85%A5%E9%97%A8/"/>
    <id>http://WSCZou.com/2018/05/28/数据分析入门/</id>
    <published>2018-05-28T01:33:26.000Z</published>
    <updated>2018-06-15T07:31:23.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jupyter-Notebook"><a href="#Jupyter-Notebook" class="headerlink" title="Jupyter Notebook"></a>Jupyter Notebook</h1><h2 id="Tab补全"><a href="#Tab补全" class="headerlink" title="Tab补全"></a>Tab补全</h2><p>从外观上，IPython shell和标准的Python解释器只是看起来不同。IPython shell的进步之一是其它IDE和交互计算分析环境都有的tab补全功能。在shell中输入表达式，按下Tab，会搜索已输入变量（对象、函数等等）的命名空间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: an_apple = <span class="number">27</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: an_example = <span class="number">42</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: an&lt;Tab&gt;</span><br><span class="line">an_apple    <span class="keyword">and</span>         an_example  any</span><br></pre></td></tr></table></figure><p>在这个例子中，IPython呈现除了之前两个定义的变量和Python的关键字和内建的函数<code>any</code>。当然，你也可以补全任何对象的方法和属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: b.&lt;Tab&gt;</span><br><span class="line">b.append  b.count   b.insert  b.reverse</span><br><span class="line">b.clear   b.extend  b.pop     b.sort</span><br><span class="line">b.copy    b.index   b.remove</span><br></pre></td></tr></table></figure><p>同样也适用于模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: datetime.&lt;Tab&gt;</span><br><span class="line">datetime.date          datetime.MAXYEAR       datetime.timedelta</span><br><span class="line">datetime.datetime      datetime.MINYEAR       datetime.timezone</span><br><span class="line">datetime.datetime_CAPI datetime.time          datetime.tzinfo</span><br></pre></td></tr></table></figure><p>在Jupyter notebook和新版的IPython（5.0及以上），自动补全功能是下拉框的形式。</p><blockquote><p>笔记：注意，默认情况下，IPython会隐藏下划线开头的方法和属性，比如魔术方法和内部的“私有”方法和属性，以避免混乱的显示（和让新手迷惑！）这些也可以tab补全，但是你必须首先键入一个下划线才能看到它们。如果你喜欢总是在tab补全中看到这样的方法，你可以IPython配置中进行设置。可以在IPython文档中查找方法。</p></blockquote><p>除了补全命名、对象和模块属性，Tab还可以补全其它的。当输入看似文件路径时（即使是Python字符串），按下Tab也可以补全电脑上对应的文件信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: datasets/movielens/&lt;Tab&gt;</span><br><span class="line">datasets/movielens/movies.dat    datasets/movielens/README</span><br><span class="line">datasets/movielens/ratings.dat   datasets/movielens/users.dat</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: path = <span class="string">'datasets/movielens/&lt;Tab&gt;</span></span><br><span class="line"><span class="string">datasets/movielens/movies.dat    datasets/movielens/README</span></span><br><span class="line"><span class="string">datasets/movielens/ratings.dat   datasets/movielens/users.dat</span></span><br></pre></td></tr></table></figure><p>结合<code>%run</code>，tab补全可以节省许多键盘操作。</p><p>另外，tab补全可以补全函数的关键词参数（包括等于号=）。见图2-4。</p><p><img src="//upload-images.jianshu.io/upload_images/7178691-8188b0386238c16a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/579" alt="img"></p><p>图2-4 Jupyter notebook中自动补全函数关键词</p><p>我们来仔细看看函数。</p><h2 id="自省"><a href="#自省" class="headerlink" title="自省"></a>自省</h2><p>在变量前后使用问号？，可以显示对象的信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [9]: b?</span><br><span class="line">Type:       list</span><br><span class="line">String Form:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">Length:     <span class="number">3</span></span><br><span class="line">Docstring:</span><br><span class="line">list() -&gt; new empty list</span><br><span class="line">list(iterable) -&gt; new list initialized from iterable's items</span><br><span class="line"></span><br><span class="line">In [10]: print?</span><br><span class="line">Docstring:</span><br><span class="line">print(value, ..., sep=<span class="string">' '</span>, end=<span class="string">'\n'</span>, file=sys.stdout, flush=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">Prints the values to a stream, <span class="keyword">or</span> to sys.stdout by default.</span><br><span class="line">Optional keyword arguments:</span><br><span class="line">file:  a file-like object (stream); defaults to the current sys.stdout.</span><br><span class="line">sep:   string inserted between values, default a space.</span><br><span class="line">end:   string appended after the last value, default a newline.</span><br><span class="line">flush: whether to forcibly flush the stream.</span><br><span class="line">Type:      builtin_function_or_method</span><br></pre></td></tr></table></figure><p>这可以作为对象的自省。如果对象是一个函数或实例方法，定义过的文档字符串，也会显示出信息。假设我们写了一个如下的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_numbers</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Add two numbers together</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns</span></span><br><span class="line"><span class="string">    -------</span></span><br><span class="line"><span class="string">    the_sum : type of arguments</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><p>然后使用?符号，就可以显示如下的文档字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [11]: add_numbers?</span><br><span class="line">Signature: add_numbers(a, b)</span><br><span class="line">Docstring:</span><br><span class="line">Add two numbers together</span><br><span class="line"></span><br><span class="line">Returns</span><br><span class="line">-------</span><br><span class="line">the_sum : type of arguments</span><br><span class="line">File:      &lt;ipython-input<span class="number">-9</span><span class="number">-6</span>a548a216e27&gt;</span><br><span class="line">Type:      function</span><br></pre></td></tr></table></figure><p>使用??会显示函数的源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [12]: add_numbers??</span><br><span class="line">Signature: add_numbers(a, b)</span><br><span class="line">Source:</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_numbers</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Add two numbers together</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns</span></span><br><span class="line"><span class="string">    -------</span></span><br><span class="line"><span class="string">    the_sum : type of arguments</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">File:      &lt;ipython-input<span class="number">-9</span><span class="number">-6</span>a548a216e27&gt;</span><br><span class="line">Type:      function</span><br></pre></td></tr></table></figure><p>?还有一个用途，就是像Unix或Windows命令行一样搜索IPython的命名空间。字符与通配符结合可以匹配所有的名字。例如，我们可以获得所有包含load的顶级NumPy命名空间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [13]: np.*load*?</span><br><span class="line">np.__loader__</span><br><span class="line">np.load</span><br><span class="line">np.loads</span><br><span class="line">np.loadtxt</span><br><span class="line">np.pkgload</span><br></pre></td></tr></table></figure><h2 id="run命令"><a href="#run命令" class="headerlink" title="%run命令"></a>%run命令</h2><p>你可以用<code>%run</code>命令运行所有的Python程序。假设有一个文件<code>ipython_script_test.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (x + y) / z</span><br><span class="line"></span><br><span class="line">a = <span class="number">5</span></span><br><span class="line">b = <span class="number">6</span></span><br><span class="line">c = <span class="number">7.5</span></span><br><span class="line"></span><br><span class="line">result = f(a, b, c)</span><br></pre></td></tr></table></figure><p>可以如下运行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: %run ipython_script_test.py</span><br></pre></td></tr></table></figure><p>这段脚本运行在空的命名空间（没有import和其它定义的变量），因此结果和普通的运行方式<code>python script.py</code>相同。文件中所有定义的变量（import、函数和全局变量，除非抛出异常），都可以在IPython shell中随后访问：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">15</span>]: c</span><br><span class="line">Out [<span class="number">15</span>]: <span class="number">7.5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: result</span><br><span class="line">Out[<span class="number">16</span>]: <span class="number">1.4666666666666666</span></span><br></pre></td></tr></table></figure><p>如果一个Python脚本需要命令行参数（在<code>sys.argv</code>中查找），可以在文件路径之后传递，就像在命令行上运行一样。</p><blockquote><p>笔记：如果想让一个脚本访问IPython已经定义过的变量，可以使用<code>%run -i</code>。</p></blockquote><p>在Jupyter notebook中，你也可以使用<code>%load</code>，它将脚本导入到一个代码格中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>%load ipython_script_test.py</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (x + y) / z</span><br><span class="line">    a = <span class="number">5</span></span><br><span class="line">    b = <span class="number">6</span></span><br><span class="line">    c = <span class="number">7.5</span></span><br><span class="line"></span><br><span class="line">    result = f(a, b, c)</span><br></pre></td></tr></table></figure><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间`"></a>命名空间`</h2><p>python<code>使用命名空间记录变量。</code>python<code>中的命名空间就像是一个</code>dict<code>，</code>key<code>是变量的名字，</code>value`是变量的值。</p><p><code>python</code>中，每个函数都有一个自己的命名空间，叫做<code>local namespace</code>，它记录了函数的变量。</p><p><code>python</code>中，每个<code>module</code>有一个自己的命名空间，叫做<code>global namespace</code>，它记录了<code>module</code>的变量，包括 <code>functions, classes</code>和其它<code>imported modules</code>，还有 <code>module</code>级别的 变量和常量。</p><p>还有一个<code>build-in</code> 命名空间，可以被任意模块访问，这个<code>build-in</code>命名空间中包含了<code>build-in function</code> 和 <code>exceptions</code>。</p><h1 id="NumPy基础：数组和矢量计算"><a href="#NumPy基础：数组和矢量计算" class="headerlink" title="NumPy基础：数组和矢量计算"></a>NumPy基础：数组和矢量计算</h1><p>NumPy之于数值计算特别重要的原因之一，是因为它可以高效处理大数组的数据。这是因为：</p><ul><li>NumPy是在一个连续的内存块中存储数据，独立于其他Python内置对象。<strong>NumPy的C语言编写的算法库可以操作内存</strong>，而不必进行类型检查或其它前期工作。比起Python的内置序列，NumPy数组使用的内存更少。</li><li>NumPy可以在整个数组上执行复杂的计算，而不需要Python的for循环。</li></ul><h2 id="NumPy的ndarray：一种多维数组对象"><a href="#NumPy的ndarray：一种多维数组对象" class="headerlink" title="NumPy的ndarray：一种多维数组对象"></a>NumPy的ndarray：一种多维数组对象</h2><h3 id="创建ndarray"><a href="#创建ndarray" class="headerlink" title="创建ndarray"></a>创建ndarray</h3><h3 id="ndarray的数据类型"><a href="#ndarray的数据类型" class="headerlink" title="ndarray的数据类型"></a>ndarray的数据类型</h3><p><em>arange会根据步长自动选取数据类型</em></p><h3 id="数组和标量之间的运算"><a href="#数组和标量之间的运算" class="headerlink" title="数组和标量之间的运算"></a>数组和标量之间的运算</h3><h3 id="基本的索引和切片"><a href="#基本的索引和切片" class="headerlink" title="基本的索引和切片"></a>基本的索引和切片</h3><h2 id="利用数组进行数据处理："><a href="#利用数组进行数据处理：" class="headerlink" title="利用数组进行数据处理："></a>利用数组进行数据处理：</h2><p><strong><em>用数组表达式代替循环的做法，通常被称为矢量化</em></strong></p><h2 id="1-计算（x-2-y-2）-用meshgrid函数把x，y分开成两个独立数组，然后用np-sqrt-xs-2-ys-2"><a href="#1-计算（x-2-y-2）-用meshgrid函数把x，y分开成两个独立数组，然后用np-sqrt-xs-2-ys-2" class="headerlink" title="1.计算（x^2,y^2）:用meshgrid函数把x，y分开成两个独立数组，然后用np.sqrt(xs  2+ys  2)"></a>1.计算（x^2,y^2）:用meshgrid函数把x，y分开成两个独立数组，然后用np.sqrt(xs <strong> 2+ys </strong> 2)</h2><ul><li><h3 id="np-meshgrid函数"><a href="#np-meshgrid函数" class="headerlink" title="np.meshgrid函数"></a>np.meshgrid函数</h3></li></ul><p>接受两个一维数组，并产生两个二维矩阵（对应于两个数组中所有的(x,y)对）： </p><p><a href="http://baike.baidu.com/view/244398.htm" target="_blank" rel="noopener">mesh</a>grid是MATLAB中用于生成网格<a href="http://baike.baidu.com/view/984096.htm" target="_blank" rel="noopener">采样点</a>的函数。在使用MATLAB进行3-D图形绘制方面有着广泛的应用。</p><ul><li><h4 id="函数功能"><a href="#函数功能" class="headerlink" title="函数功能"></a>函数功能</h4></li></ul><p>生成绘制3-D图形所需的<a href="http://baike.baidu.com/view/1396040.htm" target="_blank" rel="noopener">网格数据</a>。在计算机中进行绘图操作时， 往往需要一些<a href="http://baike.baidu.com/view/984096.htm" target="_blank" rel="noopener">采样点</a>，然后根据这些采样点来绘制出整个图形。在进行3-D绘图操作时，涉及到x、y、z三组数据，而x、y这两组数据可以看做是在Oxy平面内对坐标进行采样得到的坐标对(x, y)。</p><p>例如， 要在“3&lt;=x&lt;=5，6&lt;=y&lt;=9，z不限制<a href="http://baike.baidu.com/view/70334.htm" target="_blank" rel="noopener">区间</a>” 这个区域内绘制一个3-D图形，如果只需要整数坐标为<a href="http://baike.baidu.com/view/984096.htm" target="_blank" rel="noopener">采样点</a>的话。我们可能需要下面这样一个坐标构成的<a href="http://baike.baidu.com/view/10337.htm" target="_blank" rel="noopener">矩阵</a>：</p><p>(3,9),(4,9),(5,9);</p><p>(3,8),(4,8),(5,8);</p><p>(3,7),(4,7),(5,7);</p><p>(3,6),(4,6),(5,6);   // <strong>这些都是XOY平面的坐标点</strong></p><p>在matlab中我们可以这样描述这个坐标<a href="http://baike.baidu.com/view/10337.htm" target="_blank" rel="noopener">矩阵</a>：</p><p>把各个点的x坐标独立出来，得：</p><p>3,4,5;</p><p>3,4,5;</p><p>3,4,5;</p><p>3,4,5;</p><p>可以把这个矩阵设为X~~</p><p>再把各个点的y坐标也独立出来：</p><p>9,9,9;</p><p>8,8,8;</p><p>7,7,7;</p><p>6,6,6;</p><p>可以把这个矩阵设为Y~~</p><p>这样对应的x、y结合，便表示了上面的坐标<a href="http://baike.baidu.com/view/10337.htm" target="_blank" rel="noopener">矩阵</a>。<a href="http://baike.baidu.com/view/244398.htm" target="_blank" rel="noopener">mesh</a>grid就是产生这样两个<a href="http://baike.baidu.com/view/10337.htm" target="_blank" rel="noopener">矩阵</a>，来简化我们的操作。然后根据(x, y)计算获得z，并绘制出三维图形。</p><ul><li><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4></li></ul><p>[X,Y] = <a href="http://baike.baidu.com/view/244398.htm" target="_blank" rel="noopener">mesh</a>grid(x,y)    // <strong>这个语句是用的最多的语句</strong></p><p>上面的描述，我们可以知道，<a href="http://baike.baidu.com/view/244398.htm" target="_blank" rel="noopener">mesh</a>grid返回的两个<a href="http://baike.baidu.com/view/10337.htm" target="_blank" rel="noopener">矩阵</a>X、Y必定是行数、列数相等的（即X、Y两个矩阵都有相同的行数，和相同的列数）</p><p>且X、Y的行数都等于输入参数y中元素的总个数，X、Y的列数都等于输入参数x中元素总个数（这个结论可以通过查看<a href="http://baike.baidu.com/view/244398.htm" target="_blank" rel="noopener">mesh</a>grid的源代码得到，可以通过示例程序得到验证）。（我们自己也可以体会到）</p><p>[X,Y]=<a href="http://baike.baidu.com/view/244398.htm" target="_blank" rel="noopener">mesh</a>grid(x)与[X,Y]=<a href="http://baike.baidu.com/view/244398.htm" target="_blank" rel="noopener">mesh</a>grid(x,x)是等同的</p><p>[X,Y,Z]=<a href="http://baike.baidu.com/view/244398.htm" target="_blank" rel="noopener">mesh</a>grid(x,y,z)生成三维<a href="http://baike.baidu.com/view/209670.htm" target="_blank" rel="noopener">数组</a>，可用来计算三<a href="http://baike.baidu.com/view/296689.htm" target="_blank" rel="noopener">变量</a>的函数和绘制三维立体图</p><p>相关函数： plot3、<a href="http://baike.baidu.com/view/244398.htm" target="_blank" rel="noopener">mesh</a>、<a href="http://baike.baidu.com/view/385941.htm" target="_blank" rel="noopener">surf</a>、automesh、<a href="http://baike.baidu.com/view/8025701.htm" target="_blank" rel="noopener">ndgrid</a></p><h2 id="将条件逻辑表述为数组运算"><a href="#将条件逻辑表述为数组运算" class="headerlink" title="将条件逻辑表述为数组运算"></a>将条件逻辑表述为数组运算</h2><p>numpy.where函数是三元表达式x if condition else y的矢量化版本</p><p>假设有一个由随机数据组成的矩阵，你希望将所有正值替换为2，将所有负值替换为－2。若利用np.where，则会非常简单：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">172</span>]: arr = np.random.randn(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">173</span>]: arr</span><br><span class="line">Out[<span class="number">173</span>]: </span><br><span class="line">array([[<span class="number">-0.5031</span>, <span class="number">-0.6223</span>, <span class="number">-0.9212</span>, <span class="number">-0.7262</span>],</span><br><span class="line">       [ <span class="number">0.2229</span>,  <span class="number">0.0513</span>, <span class="number">-1.1577</span>,  <span class="number">0.8167</span>],</span><br><span class="line">       [ <span class="number">0.4336</span>,  <span class="number">1.0107</span>,  <span class="number">1.8249</span>, <span class="number">-0.9975</span>],</span><br><span class="line">       [ <span class="number">0.8506</span>, <span class="number">-0.1316</span>,  <span class="number">0.9124</span>,  <span class="number">0.1882</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">174</span>]: arr &gt; <span class="number">0</span></span><br><span class="line">Out[<span class="number">174</span>]: </span><br><span class="line">array([[<span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">False</span>],</span><br><span class="line">       [ <span class="keyword">True</span>,  <span class="keyword">True</span>, <span class="keyword">False</span>,  <span class="keyword">True</span>],</span><br><span class="line">       [ <span class="keyword">True</span>,  <span class="keyword">True</span>,  <span class="keyword">True</span>, <span class="keyword">False</span>],</span><br><span class="line">       [ <span class="keyword">True</span>, <span class="keyword">False</span>,  <span class="keyword">True</span>,  <span class="keyword">True</span>]], dtype=bool)</span><br><span class="line"></span><br><span class="line">In [<span class="number">175</span>]: np.where(arr &gt; <span class="number">0</span>, <span class="number">2</span>, <span class="number">-2</span>)</span><br><span class="line">Out[<span class="number">175</span>]: </span><br><span class="line">array([[<span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-2</span>],</span><br><span class="line">       [ <span class="number">2</span>,  <span class="number">2</span>, <span class="number">-2</span>,  <span class="number">2</span>],</span><br><span class="line">       [ <span class="number">2</span>,  <span class="number">2</span>,  <span class="number">2</span>, <span class="number">-2</span>],</span><br><span class="line">       [ <span class="number">2</span>, <span class="number">-2</span>,  <span class="number">2</span>,  <span class="number">2</span>]])</span><br></pre></td></tr></table></figure><p>使用np.where，可以将标量和数组结合起来。例如，我可用常数2替换arr中所有正的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">176</span>]: np.where(arr &gt; <span class="number">0</span>, <span class="number">2</span>, arr) <span class="comment"># set only positive values to 2</span></span><br><span class="line">Out[<span class="number">176</span>]: </span><br><span class="line">array([[<span class="number">-0.5031</span>, <span class="number">-0.6223</span>, <span class="number">-0.9212</span>, <span class="number">-0.7262</span>],</span><br><span class="line">       [ <span class="number">2.</span>    ,  <span class="number">2.</span>    , <span class="number">-1.1577</span>,  <span class="number">2.</span>    ],</span><br><span class="line">       [ <span class="number">2.</span>    ,  <span class="number">2.</span>    ,  <span class="number">2.</span>    , <span class="number">-0.9975</span>],</span><br><span class="line">       [ <span class="number">2.</span>    , <span class="number">-0.1316</span>,  <span class="number">2.</span>    ,  <span class="number">2.</span>    ]])</span><br></pre></td></tr></table></figure><p>传递给where的数组大小可以不相等，甚至可以是标量值。</p><h2 id="数学和统计方法："><a href="#数学和统计方法：" class="headerlink" title="数学和统计方法："></a>数学和统计方法：</h2><p>arr.mean(axis=1):求取均值 </p><p>arr.sum(0)</p><p>mean和sum这类的函数可以接受一个axis选项参数，用于计算该轴向上的统计值，最终结果是一个少一维的数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">182</span>]: arr.mean(axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">182</span>]: array([ <span class="number">1.022</span> ,  <span class="number">0.1875</span>, <span class="number">-0.502</span> , <span class="number">-0.0881</span>,  <span class="number">0.3611</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">183</span>]: arr.sum(axis=<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">183</span>]: array([ <span class="number">3.1693</span>, <span class="number">-2.6345</span>,  <span class="number">2.2381</span>,  <span class="number">1.1486</span>])</span><br></pre></td></tr></table></figure><p> <img src="https://upload-images.jianshu.io/upload_images/7178691-a6c6df3ca8e0b98e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"><img src="https://upload-images.jianshu.io/upload_images/7178691-866fcde885b1d357.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><p> python3中numpy生成随机数是:np.random.randn()而不是arr=randn()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arr=np.random.randn(<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">arr</span><br><span class="line">array([[[ <span class="number">0.64940349</span>, <span class="number">-0.15975234</span>],</span><br><span class="line">        [ <span class="number">0.29735591</span>,  <span class="number">0.55789277</span>],</span><br><span class="line">        [<span class="number">-0.89126438</span>, <span class="number">-0.17877176</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">0.423854</span>  ,  <span class="number">0.20532171</span>],</span><br><span class="line">        [ <span class="number">2.10879442</span>,  <span class="number">0.65558143</span>],</span><br><span class="line">        [<span class="number">-1.24561077</span>,  <span class="number">0.5913198</span> ]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">0.87765436</span>, <span class="number">-1.10474883</span>],</span><br><span class="line">        [ <span class="number">0.55865895</span>, <span class="number">-0.29967409</span>],</span><br><span class="line">        [<span class="number">-1.62506822</span>,  <span class="number">1.18154769</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">2.03562367</span>,  <span class="number">2.61382019</span>],</span><br><span class="line">        [<span class="number">-0.36074442</span>,  <span class="number">0.1386859</span> ],</span><br><span class="line">        [ <span class="number">1.01916762</span>, <span class="number">-0.90662428</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">-0.60707229</span>, <span class="number">-0.65355764</span>],</span><br><span class="line">        [<span class="number">-0.39045661</span>,  <span class="number">1.39100898</span>],</span><br><span class="line">        [<span class="number">-0.44060985</span>, <span class="number">-0.39515</span>   ]]])</span><br><span class="line">arr.sort(<span class="number">1</span>)</span><br><span class="line">arr</span><br><span class="line">array([[[<span class="number">-0.89126438</span>, <span class="number">-0.17877176</span>],</span><br><span class="line">        [<span class="number">-0.15975234</span>,  <span class="number">0.55789277</span>],</span><br><span class="line">        [ <span class="number">0.29735591</span>,  <span class="number">0.64940349</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">-1.24561077</span>,  <span class="number">0.423854</span>  ],</span><br><span class="line">        [ <span class="number">0.20532171</span>,  <span class="number">0.5913198</span> ],</span><br><span class="line">        [ <span class="number">0.65558143</span>,  <span class="number">2.10879442</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">-1.62506822</span>,  <span class="number">0.55865895</span>],</span><br><span class="line">        [<span class="number">-1.10474883</span>,  <span class="number">0.87765436</span>],</span><br><span class="line">        [<span class="number">-0.29967409</span>,  <span class="number">1.18154769</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">-0.90662428</span>,  <span class="number">0.1386859</span> ],</span><br><span class="line">        [<span class="number">-0.36074442</span>,  <span class="number">1.01916762</span>],</span><br><span class="line">        [ <span class="number">2.03562367</span>,  <span class="number">2.61382019</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">-0.65355764</span>, <span class="number">-0.60707229</span>],</span><br><span class="line">        [<span class="number">-0.44060985</span>, <span class="number">-0.39515</span>   ],</span><br><span class="line">        [<span class="number">-0.39045661</span>,  <span class="number">1.39100898</span>]]])</span><br><span class="line">arr.sort(<span class="number">2</span>)</span><br><span class="line">arr</span><br><span class="line">array([[[<span class="number">-0.89126438</span>, <span class="number">-0.17877176</span>],</span><br><span class="line">        [<span class="number">-0.15975234</span>,  <span class="number">0.55789277</span>],</span><br><span class="line">        [ <span class="number">0.29735591</span>,  <span class="number">0.64940349</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">-1.24561077</span>,  <span class="number">0.423854</span>  ],</span><br><span class="line">        [ <span class="number">0.20532171</span>,  <span class="number">0.5913198</span> ],</span><br><span class="line">        [ <span class="number">0.65558143</span>,  <span class="number">2.10879442</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">-1.62506822</span>,  <span class="number">0.55865895</span>],</span><br><span class="line">        [<span class="number">-1.10474883</span>,  <span class="number">0.87765436</span>],</span><br><span class="line">        [<span class="number">-0.29967409</span>,  <span class="number">1.18154769</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">-0.90662428</span>,  <span class="number">0.1386859</span> ],</span><br><span class="line">        [<span class="number">-0.36074442</span>,  <span class="number">1.01916762</span>],</span><br><span class="line">        [ <span class="number">2.03562367</span>,  <span class="number">2.61382019</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">-0.65355764</span>, <span class="number">-0.60707229</span>],</span><br><span class="line">        [<span class="number">-0.44060985</span>, <span class="number">-0.39515</span>   ],</span><br><span class="line">        [<span class="number">-0.39045661</span>,  <span class="number">1.39100898</span>]]])</span><br></pre></td></tr></table></figure><p> 顶级方法np.sort返回的是数组的已排序副本，而就地排序则会修改数组本身。计算数组分位数最简单的办法是对其进行排序，然后选取特定位置的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">203</span>]: large_arr = np.random.randn(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">204</span>]: large_arr.sort()</span><br><span class="line"></span><br><span class="line">In [<span class="number">205</span>]: large_arr[int(<span class="number">0.05</span> * len(large_arr))] <span class="comment"># 5% quantile</span></span><br><span class="line">Out[<span class="number">205</span>]: <span class="number">-1.5311513550102103</span></span><br></pre></td></tr></table></figure><p> 5% quantile解释：</p><p> 随机变量的分布与分位数概念 </p><p> 在质量工程师的培训中，我们经常询问学员以下图形是什么曲线，学员普遍能够回答是正态分布曲线，但进一步询问学员该曲线的纵轴f(x)表示什么，许多同学以为是概率值。其实这个曲线是正态分布概率密度曲线，f(x)是指随机变量X在观察值为x时的概率密度，如果随机变量X的单位为mm，则f(x)的单位为%/mm。曲线与X轴所围成的面积表示概率，该面积等于1，因为随机变量的所有可能取值（即：100%）都在X轴上。</p><p>以下是一个均值=10，标准差=0.5的正态分布概率密度曲线的例子，x=9.020的垂线与该分布的概率密度曲线和X轴所围成的左侧区域面积=0.025，该面积表示在随机变量X的总体分布中，有2.5%的值小于9.020，也就是说在总体分布中，随机变量X的取值小于9.020的概率为2.5%。同样，x=10.98的垂线与该分布的概率密度曲线和X轴所围成的右侧区域面积=0.025，该面积表示在随机变量X的总体分布中，有2.5%的值大于10.98，也就是说在总体分布中，随机变量X的取值大于10.98的概率为2.5%（也即是随机变量X的取值小于10.98的概率为97.5%）。<strong>在这个分布中，x=9.020的值被称为X的2.5%分位数（即：X2.5%=9.020）</strong>，x=10.98的值被称为X的97.5%分位数（X97.5%=10.98）。随机变量X有95%（即：97.5% - 2.5%=95%）的取值落在9.020至10.98之间。每个分位数都是随机变量所有可能取值中的某个值。按照定义，若某个值Xp被称为随机变量X的p分位数，则随机变量X的取值小于Xp的概率为p。</p><p>​                        <a href="http://photo.blog.sina.com.cn/showpic.html#blogid=60be90250102vby8&amp;url=http://album.sina.com.cn/pic/001LQmQ5ty6PsNXZXty3c" target="_blank" rel="noopener"><img src="http://s13.sinaimg.cn/mw690/001LQmQ5ty6PsNXZXty3c&amp;690" alt="随机变量的分布与分位数概念"></a></p><h2 id="唯一化以及其它的集合逻辑"><a href="#唯一化以及其它的集合逻辑" class="headerlink" title="唯一化以及其它的集合逻辑"></a>唯一化以及其它的集合逻辑</h2><p>NumPy提供了一些针对一维ndarray的基本集合运算。最常用的可能要数np.unique了，它用于找出数组中的唯一值并返回已排序的结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">206</span>]: names = np.array([<span class="string">'Bob'</span>, <span class="string">'Joe'</span>, <span class="string">'Will'</span>, <span class="string">'Bob'</span>, <span class="string">'Will'</span>, <span class="string">'Joe'</span>, <span class="string">'Joe'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">207</span>]: np.unique(names)</span><br><span class="line">Out[<span class="number">207</span>]: </span><br><span class="line">array([<span class="string">'Bob'</span>, <span class="string">'Joe'</span>, <span class="string">'Will'</span>],</span><br><span class="line">      dtype=<span class="string">'&lt;U4'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">208</span>]: ints = np.array([<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">209</span>]: np.unique(ints)</span><br><span class="line">Out[<span class="number">209</span>]: array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure><p>拿跟np.unique等价的纯Python代码来对比一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">210</span>]: sorted(set(names))</span><br><span class="line">Out[<span class="number">210</span>]: [<span class="string">'Bob'</span>, <span class="string">'Joe'</span>, <span class="string">'Will'</span>]</span><br></pre></td></tr></table></figure><p>另一个函数np.in1d用于测试一个数组中的值在另一个数组中的成员资格，返回一个布尔型数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">211</span>]: values = np.array([<span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">212</span>]: np.in1d(values, [<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>])</span><br><span class="line">Out[<span class="number">212</span>]: array([ <span class="keyword">True</span>, <span class="keyword">False</span>, <span class="keyword">False</span>,  <span class="keyword">True</span>,  <span class="keyword">True</span>, <span class="keyword">False</span>,  <span class="keyword">True</span>], dtype=bool)</span><br></pre></td></tr></table></figure><p> <img src="https://upload-images.jianshu.io/upload_images/7178691-80e85ae6b9c89ada.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><h2 id="用于数组的文件输入输出"><a href="#用于数组的文件输入输出" class="headerlink" title="用于数组的文件输入输出"></a>用于数组的文件输入输出</h2><p> NumPy能够读写磁盘上的文本数据或二进制数据。 </p><p> np.save和np.load是读写磁盘数组数据的两个主要函数。默认情况下，数组是以未压缩的原始二进制格式保存在扩展名为.npy的文件中的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">213</span>]: arr = np.arange(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">214</span>]: np.save(<span class="string">'some_array'</span>, arr)</span><br></pre></td></tr></table></figure><p>如果文件路径末尾没有扩展名.npy，则该扩展名会被自动加上。然后就可以通过np.load读取磁盘上的数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">215</span>]: np.load(<span class="string">'some_array.npy'</span>)</span><br><span class="line">Out[<span class="number">215</span>]: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br></pre></td></tr></table></figure><p>通过np.savez可以将多个数组保存到一个未压缩文件中，将数组以关键字参数的形式传入即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">216</span>]: np.savez(<span class="string">'array_archive.npz'</span>, a=arr, b=arr)</span><br></pre></td></tr></table></figure><p>加载.npz文件时，你会得到一个类似字典的对象，该对象会对各个数组进行延迟加载：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">217</span>]: arch = np.load(<span class="string">'array_archive.npz'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">218</span>]: arch[<span class="string">'b'</span>]</span><br><span class="line">Out[<span class="number">218</span>]: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br></pre></td></tr></table></figure><p>如果数据压缩的很好，就可以使用numpy.savez_compressed：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">219</span>]: np.savez_compressed(<span class="string">'arrays_compressed.npz'</span>, a=arr, b=arr)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Jupyter-Notebook&quot;&gt;&lt;a href=&quot;#Jupyter-Notebook&quot; class=&quot;headerlink&quot; title=&quot;Jupyter Notebook&quot;&gt;&lt;/a&gt;Jupyter Notebook&lt;/h1&gt;&lt;h2 id=&quot;Tab补全&quot;&gt;&lt;a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="http://WSCZou.com/2018/05/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://WSCZou.com/2018/05/27/数据结构/</id>
    <published>2018-05-27T07:19:10.000Z</published>
    <updated>2018-06-01T11:12:37.437Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-串"><a href="#一-串" class="headerlink" title="一.串"></a>一.串</h2><p>1.计算子串的个数：</p><p>字串： n（n+1）/2 + 1</p><p>非空子串：n（n+1）/2</p><p>非空真子串：n（n+1）/2 - 1</p><p>2.index函数</p><p>3.编写一个程序，求两个字符串S和T的一个最长公共子串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> *ch;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line">&#125;Hstring;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">MaxComString</span><span class="params">(Hstring S,Hstring T,<span class="keyword">int</span> &amp;length)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">index=<span class="number">0</span>;</span><br><span class="line">length=<span class="number">0</span>;</span><br><span class="line">i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//令i作为扫描字符串S的指针</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;S.length)&#123;</span><br><span class="line">j=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//令j作为扫描字符串T的指针</span></span><br><span class="line"><span class="keyword">while</span>(j&lt;T.length)&#123;</span><br><span class="line"><span class="keyword">if</span>(s.ch[i]==T.ch[j])&#123;</span><br><span class="line"><span class="comment">//找一个子串，其在字符串S中的序号为i，长度为length1</span></span><br><span class="line">length1=i;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>;S.ch[i+k]==T.ch[j+k];k++)length1++;</span><br><span class="line"><span class="keyword">if</span>(length1&gt;length)&#123;</span><br><span class="line"><span class="comment">//将较大长度值赋给index与length</span></span><br><span class="line">index=i;</span><br><span class="line">length=length1;</span><br><span class="line">&#125;</span><br><span class="line">j=j+length1;<span class="comment">//继续扫描字符串T中第j=length1个字符之后的字符</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//while</span></span><br><span class="line">i++;</span><br><span class="line">&#125;<span class="comment">//while</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"最长公共子串:"</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length;i++)<span class="built_in">printf</span>(<span class="string">"%c"</span>,S.ch[index+i]);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-串&quot;&gt;&lt;a href=&quot;#一-串&quot; class=&quot;headerlink&quot; title=&quot;一.串&quot;&gt;&lt;/a&gt;一.串&lt;/h2&gt;&lt;p&gt;1.计算子串的个数：&lt;/p&gt;
&lt;p&gt;字串： n（n+1）/2 + 1&lt;/p&gt;
&lt;p&gt;非空子串：n（n+1）/2&lt;/p&gt;
&lt;p&gt;非空真
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>机器学习</title>
    <link href="http://WSCZou.com/2018/05/26/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>http://WSCZou.com/2018/05/26/机器学习/</id>
    <published>2018-05-26T02:15:11.000Z</published>
    <updated>2018-05-26T02:15:12.028Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python仔细学习</title>
    <link href="http://WSCZou.com/2018/04/19/python%E4%BB%94%E7%BB%86%E5%AD%A6%E4%B9%A0/"/>
    <id>http://WSCZou.com/2018/04/19/python仔细学习/</id>
    <published>2018-04-19T10:49:08.000Z</published>
    <updated>2018-06-24T10:38:48.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python3基础语法："><a href="#python3基础语法：" class="headerlink" title="python3基础语法："></a>python3基础语法：</h1><h2 id="标识符（当时学c语言时也没注意）😢"><a href="#标识符（当时学c语言时也没注意）😢" class="headerlink" title="标识符（当时学c语言时也没注意）😢"></a>标识符（当时学c语言时也没注意）😢</h2><ul><li>第一个字符必须是字母表中<strong>字母</strong>或下<strong>划线 _</strong> 。</li><li>标识符的<strong>其他的部分</strong>由<strong>字母、数字和下划线</strong>组成。</li><li>标识符对<strong>大小写敏感</strong>。</li></ul><h2 id="python关键字"><a href="#python关键字" class="headerlink" title="python关键字"></a>python关键字</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'False'</span>, <span class="string">'None'</span>, <span class="string">'True'</span>, <span class="string">'and'</span>, <span class="string">'as'</span>, <span class="string">'assert'</span>, <span class="string">'break'</span>, <span class="string">'class'</span>, <span class="string">'continue'</span>, <span class="string">'def'</span>, <span class="string">'del'</span>, <span class="string">'elif'</span>, <span class="string">'else'</span>, <span class="string">'except'</span>, <span class="string">'finally'</span>, <span class="string">'for'</span>, <span class="string">'from'</span>, <span class="string">'global'</span>, <span class="string">'if'</span>, <span class="string">'import'</span>, <span class="string">'in'</span>, <span class="string">'is'</span>, <span class="string">'lambda'</span>, <span class="string">'nonlocal'</span>, <span class="string">'not'</span>, <span class="string">'or'</span>, <span class="string">'pass'</span>, <span class="string">'raise'</span>, <span class="string">'return'</span>, <span class="string">'try'</span>, <span class="string">'while'</span>, <span class="string">'with'</span>, <span class="string">'yield'</span>]</span><br></pre></td></tr></table></figure><h2 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h2><p>python最具特色的就是使用缩进来表示代码块，不需要使用大括号 {}</p><p>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数</p><h2 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h2><p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠(\)来实现多行语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br></pre></td></tr></table></figure><p>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠()，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">total = [<span class="string">'item_one'</span>, <span class="string">'item_two'</span>, <span class="string">'item_three'</span>,</span><br><span class="line">        <span class="string">'item_four'</span>, <span class="string">'item_five'</span>]</span><br></pre></td></tr></table></figure><h2 id="数字-Number-类型"><a href="#数字-Number-类型" class="headerlink" title="数字(Number)类型"></a>数字(Number)类型</h2><p>除了我所学的C语言中的还有一个</p><ul><li><strong>complex</strong> (复数), 如 1 + 2j、 1.1 + 2.2j</li></ul><h2 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h2><p><strong>在Python3中，所有的字符串都是Unicode字符串。</strong></p><ul><li>反斜杠可以用来转义，使用<strong>r</strong>可以让反斜杠不发生转义。。 如 r”this is a line with \n” 则\n会显示，并不是换行。</li><li>按字面意义级联字符串，如”this “ “is “ “string”会被自动转换为this is string。</li><li>字符串可以用 + 运算符连接在一起，用 * 运算符重复。</li><li>Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。</li><li>Python中的字符串不能改变。</li><li>字符串的截取的语法格式如下：变量[头下标:尾下标]等待用户输入</li><li>Python 不支持单字符类型，<strong>单字符</strong>在 Python 中也是作为一个<strong>字符串使用</strong>。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input(<span class="string">"\n\n按下 enter 键后退出。"</span>)</span><br></pre></td></tr></table></figure><p>以上代码中 ，”\n\n”在结果输出前会输出两个新的空行。一旦用户按下 enter 键时，程序将退出。</p><h3 id="python三引号"><a href="#python三引号" class="headerlink" title="python三引号"></a>python三引号</h3><p>python三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。</p><p>三引号让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的WYSIWYG（所见即所得）格式的。</p><p>一个典型的用例是，当你需要一块HTML或者SQL时，这时用字符串组合，特殊字符串转义将会非常的繁琐。</p><p><strong>而三引号使其不再复杂</strong></p><h3 id="Python-的字符串内建函数"><a href="#Python-的字符串内建函数" class="headerlink" title="Python 的字符串内建函数"></a><strong>Python 的字符串内建函数</strong></h3><p>Python 的字符串常用内建函数如下：</p><table><thead><tr><th>序号</th><th>方法及描述</th></tr></thead><tbody><tr><td>1</td><td><a href="http://www.runoob.com/python3/python3-string-capitalize.html" target="_blank" rel="noopener">capitalize()</a>将字符串的第一个字符转换为大写</td></tr><tr><td>2</td><td><a href="http://www.runoob.com/python3/python3-string-center.html" target="_blank" rel="noopener">center(width, fillchar)</a>返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。</td></tr><tr><td>3</td><td><a href="http://www.runoob.com/python3/python3-string-count.html" target="_blank" rel="noopener">count(str, beg= 0,end=len(string))</a>返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</td></tr><tr><td>4</td><td><a href="http://www.runoob.com/python3/python3-string-decode.html" target="_blank" rel="noopener">bytes.decode(encoding=”utf-8”, errors=”strict”)</a>Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象，这个 bytes 对象可以由 str.encode() 来编码返回。</td></tr><tr><td>5</td><td><a href="http://www.runoob.com/python3/python3-string-encode.html" target="_blank" rel="noopener">encode(encoding=’UTF-8’,errors=’strict’)</a>以 encoding 指定的编码格式编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td></tr><tr><td>6</td><td><a href="http://www.runoob.com/python3/python3-string-endswith.html" target="_blank" rel="noopener">endswith(suffix, beg=0, end=len(string))</a>检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.</td></tr><tr><td>7</td><td><a href="http://www.runoob.com/python3/python3-string-expandtabs.html" target="_blank" rel="noopener">expandtabs(tabsize=8)</a>把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8 。</td></tr><tr><td>8</td><td><a href="http://www.runoob.com/python3/python3-string-find.html" target="_blank" rel="noopener">find(str, beg=0 end=len(string))</a>检测 str 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1</td></tr><tr><td>9</td><td><a href="http://www.runoob.com/python3/python3-string-index.html" target="_blank" rel="noopener">index(str, beg=0, end=len(string))</a>跟find()方法一样，只不过如果str不在字符串中会报一个异常.</td></tr><tr><td>10</td><td><a href="http://www.runoob.com/python3/python3-string-isalnum.html" target="_blank" rel="noopener">isalnum()</a>如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True,否则返回 False</td></tr><tr><td>11</td><td><a href="http://www.runoob.com/python3/python3-string-isalpha.html" target="_blank" rel="noopener">isalpha()</a>如果字符串至少有一个字符并且所有字符都是字母则返回 True, 否则返回 False</td></tr><tr><td>12</td><td><a href="http://www.runoob.com/python3/python3-string-isdigit.html" target="_blank" rel="noopener">isdigit()</a>如果字符串只包含数字则返回 True 否则返回 False..</td></tr><tr><td>13</td><td><a href="http://www.runoob.com/python3/python3-string-islower.html" target="_blank" rel="noopener">islower()</a>如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</td></tr><tr><td>14</td><td><a href="http://www.runoob.com/python3/python3-string-isnumeric.html" target="_blank" rel="noopener">isnumeric()</a>如果字符串中只包含数字字符，则返回 True，否则返回 False</td></tr><tr><td>15</td><td><a href="http://www.runoob.com/python3/python3-string-isspace.html" target="_blank" rel="noopener">isspace()</a>如果字符串中只包含空白，则返回 True，否则返回 False.</td></tr><tr><td>16</td><td><a href="http://www.runoob.com/python3/python3-string-istitle.html" target="_blank" rel="noopener">istitle()</a>如果字符串是标题化的(见 title())则返回 True，否则返回 False</td></tr><tr><td>17</td><td><a href="http://www.runoob.com/python3/python3-string-isupper.html" target="_blank" rel="noopener">isupper()</a>如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False</td></tr><tr><td>18</td><td><a href="http://www.runoob.com/python3/python3-string-join.html" target="_blank" rel="noopener">join(seq)</a>以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</td></tr><tr><td>19</td><td><a href="http://www.runoob.com/python3/python3-string-len.html" target="_blank" rel="noopener">len(string)</a>返回字符串长度</td></tr><tr><td>20</td><td><a href="http://www.runoob.com/python3/python3-string-ljust.html" target="_blank" rel="noopener">ljust(width[, fillchar])</a>返回一个原字符串左对齐,并使用 fillchar 填充至长度 width 的新字符串，fillchar 默认为空格。</td></tr><tr><td>21</td><td><a href="http://www.runoob.com/python3/python3-string-lower.html" target="_blank" rel="noopener">lower()</a>转换字符串中所有大写字符为小写.</td></tr><tr><td>22</td><td><a href="http://www.runoob.com/python3/python3-string-lstrip.html" target="_blank" rel="noopener">lstrip()</a>截掉字符串左边的空格或指定字符。</td></tr><tr><td>23</td><td><a href="http://www.runoob.com/python3/python3-string-maketrans.html" target="_blank" rel="noopener">maketrans()</a>创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</td></tr><tr><td>24</td><td><a href="http://www.runoob.com/python3/python3-string-max.html" target="_blank" rel="noopener">max(str)</a>返回字符串 str 中最大的字母。</td></tr><tr><td>25</td><td><a href="http://www.runoob.com/python3/python3-string-min.html" target="_blank" rel="noopener">min(str)</a>返回字符串 str 中最小的字母。</td></tr><tr><td>26</td><td><a href="http://www.runoob.com/python3/python3-string-replace.html" target="_blank" rel="noopener">replace(old, new [, max])</a>把 将字符串中的 str1 替换成 str2,如果 max 指定，则替换不超过 max 次。</td></tr><tr><td>27</td><td><a href="http://www.runoob.com/python3/python3-string-rfind.html" target="_blank" rel="noopener">rfind(str, beg=0,end=len(string))</a>类似于 find()函数，不过是从右边开始查找.</td></tr><tr><td>28</td><td><a href="http://www.runoob.com/python3/python3-string-rindex.html" target="_blank" rel="noopener">rindex( str, beg=0, end=len(string))</a>类似于 index()，不过是从右边开始.</td></tr><tr><td>29</td><td><a href="http://www.runoob.com/python3/python3-string-rjust.html" target="_blank" rel="noopener">rjust(width,[, fillchar])</a>返回一个原字符串右对齐,并使用fillchar(默认空格）填充至长度 width 的新字符串</td></tr><tr><td>30</td><td><a href="http://www.runoob.com/python3/python3-string-rstrip.html" target="_blank" rel="noopener">rstrip()</a>删除字符串字符串末尾的空格.</td></tr><tr><td>31</td><td><a href="http://www.runoob.com/python3/python3-string-split.html" target="_blank" rel="noopener">split(str=””, num=string.count(str))</a>num=string.count(str)) 以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num 个子字符串</td></tr><tr><td>32</td><td><a href="http://www.runoob.com/python3/python3-string-splitlines.html" target="_blank" rel="noopener">splitlines([keepends])</a>按照行(‘\r’, ‘\r\n’, \n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。</td></tr><tr><td>33</td><td><a href="http://www.runoob.com/python3/python3-string-startswith.html" target="_blank" rel="noopener">startswith(str, beg=0,end=len(string))</a>检查字符串是否是以 obj 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查。</td></tr><tr><td>34</td><td><a href="http://www.runoob.com/python3/python3-string-strip.html" target="_blank" rel="noopener">strip([chars])</a>在字符串上执行 lstrip()和 rstrip()</td></tr><tr><td>35</td><td><a href="http://www.runoob.com/python3/python3-string-swapcase.html" target="_blank" rel="noopener">swapcase()</a>将字符串中大写转换为小写，小写转换为大写</td></tr><tr><td>36</td><td><a href="http://www.runoob.com/python3/python3-string-title.html" target="_blank" rel="noopener">title()</a>返回”标题化”的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</td></tr><tr><td>37</td><td><a href="http://www.runoob.com/python3/python3-string-translate.html" target="_blank" rel="noopener">translate(table, deletechars=””)</a>根据 str 给出的表(包含 256 个字符)转换 string 的字符, 要过滤掉的字符放到 deletechars 参数中</td></tr><tr><td>38</td><td><a href="http://www.runoob.com/python3/python3-string-upper.html" target="_blank" rel="noopener">upper()</a>转换字符串中的小写字母为大写</td></tr><tr><td>39</td><td><a href="http://www.runoob.com/python3/python3-string-zfill.html" target="_blank" rel="noopener">zfill (width)</a>返回长度为 width 的字符串，原字符串右对齐，前面填充0</td></tr><tr><td>40</td><td><a href="http://www.runoob.com/python3/python3-string-isdecimal.html" target="_blank" rel="noopener">isdecimal()</a>检查字符串是否只包含十进制字符，如果是返回 true，否则返回 false。</td></tr></tbody></table><h2 id="Print-输出"><a href="#Print-输出" class="headerlink" title="Print 输出"></a>Print 输出</h2><p>print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 <strong>end=””</strong>：</p><p>在 Python 中，字符串格式化使用与 C 中 sprintf 函数一样的语法。</p><p>#!/usr/bin/python3 print (“我叫 %s 今年 %d 岁!” <strong>% </strong>(‘小明’, 10))（注意这里与c语言不同的是引号后面是<strong>%</strong>而不是，）</p><h1 id="Python3-基本数据类型："><a href="#Python3-基本数据类型：" class="headerlink" title="Python3 基本数据类型："></a>Python3 基本数据类型：</h1><h3 id="多个变量赋值（再也不用像C语言那样一个一个赋值了😄）"><a href="#多个变量赋值（再也不用像C语言那样一个一个赋值了😄）" class="headerlink" title="多个变量赋值（再也不用像C语言那样一个一个赋值了😄）"></a>多个变量赋值（再也不用像C语言那样一个一个赋值了😄）</h3><p>Python允许你同时为多个变量赋值。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = b = c = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>以上实例，创建一个整型对象，值为1，三个变量被分配到相同的内存空间上。</p><p>您也可以为多个对象指定多个变量。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">"runoob"</span></span><br></pre></td></tr></table></figure><p>以上实例，两个整型对象 1 和 2 的分配给变量 a 和 b，字符串对象 “runoob” 分配给变量 c。</p><h2 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h2><p>Python3 中有六个标准的数据类型：</p><ul><li>Number（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Sets（集合）</li><li>Dictionary（字典）</li></ul><p>Python3 的六个标准数据类型中：</p><ul><li><strong>不可变数据（四个）：</strong>Number（数字）、String（字符串）、Tuple（元组）、Sets（集合）；</li><li><strong>可变数据（两个）：</strong>List（列表）、Dictionary（字典）。</li></ul><p><strong>内置的 type() 函数可以用来查询变量所指的对象类型。</strong></p><p>此外还可以用 isinstance 来判断：</p><p>>&gt;&gt;a = 111&gt;&gt;&gt; isinstance(a, int)True&gt;&gt;&gt;</p><p>isinstance 和 type 的区别在于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">isinstance(A(), A)  <span class="comment"># returns True</span></span><br><span class="line">type(A()) == A      <span class="comment"># returns True</span></span><br><span class="line">isinstance(B(), A)    <span class="comment"># returns True</span></span><br><span class="line">type(B()) == A        <span class="comment"># returns False</span></span><br></pre></td></tr></table></figure><p>区别就是:</p><ul><li>type()不会认为子类是一种父类类型。</li><li>isinstance()会认为子类是一种父类类型。</li></ul><p>当你指定一个值时，Number 对象就会被创建：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var1 = <span class="number">1</span></span><br><span class="line">var2 = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>您也可以使用del语句删除一些对象引用。</p><p>del语句的语法是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> var1[,var2[,var3[....,varN]]]]</span><br></pre></td></tr></table></figure><p>您可以通过使用del语句删除单个或多个对象。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> var</span><br><span class="line"><span class="keyword">del</span> var_a, var_b</span><br></pre></td></tr></table></figure><h3 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h3><p>数值的除法（/）总是返回一个浮点数，要获取整数使用//操作符。</p><p>在混合计算时，Python会把整型转换成为浮点数。</p><p>Python还支持复数，复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型</p><h2 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h2><p>索引值以 0 为开始值，-1 为从末尾的开始位置。</p><p>加号 (+) 是字符串的连接符， 星号 (*) 表示复制当前字符串，紧跟的数字为复制的次数</p><p>Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。</p><h2 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h2><p>列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p><p>列表是写在方括号([])之间、用逗号分隔开的元素列表。</p><p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p><p><strong>与Python字符串不一样的是，列表中的元素是可以改变的</strong></p><h3 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h3><p>使用嵌套列表即在列表里创建其它列表，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [a, n]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x[<span class="number">0</span>]</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line"><span class="string">'b'</span></span><br></pre></td></tr></table></figure><h3 id="Python列表函数-amp-方法"><a href="#Python列表函数-amp-方法" class="headerlink" title="Python列表函数&amp;方法"></a>Python列表函数&amp;方法</h3><p>Python包含以下函数:</p><table><thead><tr><th>序号</th><th>函数</th></tr></thead><tbody><tr><td>1</td><td><a href="http://www.runoob.com/python3/python3-att-list-len.html" target="_blank" rel="noopener">len(list)</a>列表元素个数</td></tr><tr><td>2</td><td><a href="http://www.runoob.com/python3/python3-att-list-max.html" target="_blank" rel="noopener">max(list)</a>返回列表元素最大值</td></tr><tr><td>3</td><td><a href="http://www.runoob.com/python3/python3-att-list-min.html" target="_blank" rel="noopener">min(list)</a>返回列表元素最小值</td></tr><tr><td>4</td><td><a href="http://www.runoob.com/python3/python3-att-list-list.html" target="_blank" rel="noopener">list(seq)</a>将元组转换为列表</td></tr></tbody></table><p>Python包含以下方法:</p><table><thead><tr><th>序号</th><th>方法</th></tr></thead><tbody><tr><td>1</td><td><a href="http://www.runoob.com/python3/python3-att-list-append.html" target="_blank" rel="noopener">list.append(obj)</a>在列表末尾添加新的对象</td></tr><tr><td>2</td><td><a href="http://www.runoob.com/python3/python3-att-list-count.html" target="_blank" rel="noopener">list.count(obj)</a>统计某个元素在列表中出现的次数</td></tr><tr><td>3</td><td><a href="http://www.runoob.com/python3/python3-att-list-extend.html" target="_blank" rel="noopener">list.extend(seq)</a>在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td>4</td><td><a href="http://www.runoob.com/python3/python3-att-list-index.html" target="_blank" rel="noopener">list.index(obj)</a>从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td>5</td><td><a href="http://www.runoob.com/python3/python3-att-list-insert.html" target="_blank" rel="noopener">list.insert(index, obj)</a>将对象插入列表</td></tr><tr><td>6</td><td><a href="http://www.runoob.com/python3/python3-att-list-pop.html" target="_blank" rel="noopener">list.pop(obj=list[-1])</a>移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td>7</td><td><a href="http://www.runoob.com/python3/python3-att-list-remove.html" target="_blank" rel="noopener">list.remove(obj)</a>移除列表中某个值的第一个匹配项</td></tr><tr><td>8</td><td><a href="http://www.runoob.com/python3/python3-att-list-reverse.html" target="_blank" rel="noopener">list.reverse()</a>反向列表中元素</td></tr><tr><td>9</td><td><a href="http://www.runoob.com/python3/python3-att-list-sort.html" target="_blank" rel="noopener">list.sort([func])</a>对原列表进行排序</td></tr><tr><td>10</td><td><a href="http://www.runoob.com/python3/python3-att-list-clear.html" target="_blank" rel="noopener">list.clear()</a>清空列表</td></tr><tr><td>11</td><td><a href="http://www.runoob.com/python3/python3-att-list-copy.html" target="_blank" rel="noopener">list.copy()</a>复制列表</td></tr></tbody></table><h2 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h2><p>元组（tuple）与列表类似，不同之处在于元组的元素<strong>不能修改</strong>。元组写在小括号 () 里，元素之间用逗号隔开。</p><p><strong>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</strong></p><p>构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tup1 = ()    <span class="comment"># 空元组</span></span><br><span class="line">tup2 = (<span class="number">20</span>,) <span class="comment"># 一个元素，需要在元素后添加逗号</span></span><br></pre></td></tr></table></figure><p>元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = (<span class="number">50</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(tup1)     <span class="comment"># 不加逗号，类型为整型</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">&gt;&gt;&gt; tup1 = (50,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(tup1)     <span class="comment"># 加上逗号，类型为元组</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br></pre></td></tr></table></figure><h3 id="元组内置函数"><a href="#元组内置函数" class="headerlink" title="元组内置函数"></a>元组内置函数</h3><p>Python元组包含了以下内置函数</p><table><thead><tr><th>序号</th><th>方法及描述</th><th>实例</th></tr></thead><tbody><tr><td>1</td><td>len(tuple)计算元组元素个数。</td><td><code>&gt;&gt;&gt; tuple1 = (&#39;Google&#39;, &#39;Runoob&#39;, &#39;Taobao&#39;)&gt;&gt;&gt; len(tuple1)3&gt;&gt;&gt;</code></td></tr><tr><td>2</td><td>max(tuple)返回元组中元素最大值。</td><td><code>&gt;&gt;&gt; tuple2 = (&#39;5&#39;, &#39;4&#39;, &#39;8&#39;)&gt;&gt;&gt; max(tuple2)&#39;8&#39;&gt;&gt;&gt;</code></td></tr><tr><td>3</td><td>min(tuple)返回元组中元素最小值。</td><td><code>&gt;&gt;&gt; tuple2 = (&#39;5&#39;, &#39;4&#39;, &#39;8&#39;)&gt;&gt;&gt; min(tuple2)&#39;4&#39;&gt;&gt;&gt;</code></td></tr><tr><td>4</td><td>tuple(seq)将列表转换为元组。</td><td><code>&gt;&gt;&gt; list1= [&#39;Google&#39;, &#39;Taobao&#39;, &#39;Runoob&#39;, &#39;Baidu&#39;]&gt;&gt;&gt; tuple1=tuple(list1)&gt;&gt;&gt; tuple1(&#39;Google&#39;, &#39;Taobao&#39;, &#39;Runoob&#39;, &#39;Baidu&#39;)</code></td></tr></tbody></table><h2 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h2><p>集合（set）是一个无序不重复元素的序列。</p><p>基本功能是进行成员关系测试和删除重复元素。</p><p>可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个<strong>空集合必须用 set() 而不是 { }</strong>，因为 <strong>{ } 是用来创建一个空字典。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#set可以进行集合运算</span></span><br><span class="line">a = set(<span class="string">'abracadabra'</span>)</span><br><span class="line">b = set(<span class="string">'alacazam'</span>)</span><br><span class="line"> </span><br><span class="line">print(a)</span><br><span class="line"> </span><br><span class="line">print(a - b)     <span class="comment"># a和b的差集</span></span><br><span class="line"> </span><br><span class="line">print(a | b)     <span class="comment"># a和b的并集</span></span><br><span class="line"> </span><br><span class="line">print(a &amp; b)     <span class="comment"># a和b的交集</span></span><br><span class="line"> </span><br><span class="line">print(a ^ b)     <span class="comment"># a和b中不同时存在的元素</span></span><br></pre></td></tr></table></figure><h2 id="Dictionary（字典）"><a href="#Dictionary（字典）" class="headerlink" title="Dictionary（字典）"></a>Dictionary（字典）</h2><p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p><p>字典是一种映射类型，字典用”{ }”标识，它是一个无序的<strong>键(key) : 值(value)</strong>对集合。</p><p>键(key)必须使用不可变类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;x: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>)&#125;</span><br><span class="line">&#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">4</span>: <span class="number">16</span>, <span class="number">6</span>: <span class="number">36</span>&#125;</span><br></pre></td></tr></table></figure><p>这里的x**2是x平方的意思</p><h3 id="字典键的特性"><a href="#字典键的特性" class="headerlink" title="字典键的特性"></a>字典键的特性</h3><p>字典值可以是任何的 python 对象，既可以是标准的对象，也可以是用户定义的，但键不行。</p><p>两个重要的点需要记住：</p><p>1）不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住，如下实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Runoob'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Name'</span>: <span class="string">'小菜鸟'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"dict['Name']: "</span>, dict[<span class="string">'Name'</span>])</span><br></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict[<span class="string">'Name'</span>]:  小菜鸟</span><br></pre></td></tr></table></figure><p>2）键必须不可变，所以可以用数字，字符串或元组充当，而用列表就不行，如下实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line">dict = &#123;[<span class="string">'Name'</span>]: <span class="string">'Runoob'</span>, <span class="string">'Age'</span>: <span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"dict['Name']: "</span>, dict[<span class="string">'Name'</span>])</span><br></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"test.py"</span>, line <span class="number">3</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    dict = &#123;[<span class="string">'Name'</span>]: <span class="string">'Runoob'</span>, <span class="string">'Age'</span>: <span class="number">7</span>&#125;</span><br><span class="line">TypeError: unhashable type: <span class="string">'list'</span></span><br></pre></td></tr></table></figure><h3 id="字典内置函数-amp-方法"><a href="#字典内置函数-amp-方法" class="headerlink" title="字典内置函数&amp;方法"></a>字典内置函数&amp;方法</h3><p>Python字典包含了以下内置函数：</p><table><thead><tr><th>序号</th><th>函数及描述</th><th>实例</th></tr></thead><tbody><tr><td>1</td><td>len(dict)计算字典元素个数，即键的总数。</td><td><code>&gt;&gt;&gt; dict = {&#39;Name&#39;: &#39;Runoob&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;}&gt;&gt;&gt; len(dict)3</code></td></tr><tr><td>2</td><td>str(dict)输出字典，以可打印的字符串表示。</td><td><code>&gt;&gt;&gt; dict = {&#39;Name&#39;: &#39;Runoob&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;}&gt;&gt;&gt; str(dict)&quot;{&#39;Name&#39;: &#39;Runoob&#39;, &#39;Class&#39;: &#39;First&#39;, &#39;Age&#39;: 7}&quot;</code></td></tr><tr><td>3</td><td>type(variable)返回输入的变量类型，如果变量是字典就返回字典类型。</td><td><code>&gt;&gt;&gt; dict = {&#39;Name&#39;: &#39;Runoob&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;}&gt;&gt;&gt; type(dict)&lt;class &#39;dict&#39;&gt;</code></td></tr></tbody></table><p>Python字典包含了以下内置方法：</p><table><thead><tr><th>序号</th><th>函数及描述</th></tr></thead><tbody><tr><td>1</td><td><a href="http://www.runoob.com/python3/python3-att-dictionary-clear.html" target="_blank" rel="noopener">radiansdict.clear()</a>删除字典内所有元素</td></tr><tr><td>2</td><td><a href="http://www.runoob.com/python3/python3-att-dictionary-copy.html" target="_blank" rel="noopener">radiansdict.copy()</a>返回一个字典的浅复制</td></tr><tr><td>3</td><td><a href="http://www.runoob.com/python3/python3-att-dictionary-fromkeys.html" target="_blank" rel="noopener">radiansdict.fromkeys()</a>创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值</td></tr><tr><td>4</td><td><a href="http://www.runoob.com/python3/python3-att-dictionary-get.html" target="_blank" rel="noopener">radiansdict.get(key, default=None)</a>返回指定键的值，如果值不在字典中返回default值</td></tr><tr><td>5</td><td><a href="http://www.runoob.com/python3/python3-att-dictionary-in.html" target="_blank" rel="noopener">key in dict</a>如果键在字典dict里返回true，否则返回false</td></tr><tr><td>6</td><td><a href="http://www.runoob.com/python3/python3-att-dictionary-items.html" target="_blank" rel="noopener">radiansdict.items()</a>以列表返回可遍历的(键, 值) 元组数组</td></tr><tr><td>7</td><td><a href="http://www.runoob.com/python3/python3-att-dictionary-keys.html" target="_blank" rel="noopener">radiansdict.keys()</a>以列表返回一个字典所有的键</td></tr><tr><td>8</td><td><a href="http://www.runoob.com/python3/python3-att-dictionary-setdefault.html" target="_blank" rel="noopener">radiansdict.setdefault(key, default=None)</a>和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td></tr><tr><td>9</td><td><a href="http://www.runoob.com/python3/python3-att-dictionary-update.html" target="_blank" rel="noopener">radiansdict.update(dict2)</a>把字典dict2的键/值对更新到dict里</td></tr><tr><td>10</td><td><a href="http://www.runoob.com/python3/python3-att-dictionary-values.html" target="_blank" rel="noopener">radiansdict.values()</a>以列表返回字典中的所有值</td></tr><tr><td>11</td><td><a href="http://www.runoob.com/python3/python3-att-dictionary-pop.html" target="_blank" rel="noopener">pop(key[,default])</a>删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td></tr><tr><td>12</td><td><a href="http://www.runoob.com/python3/python3-att-dictionary-popitem.html" target="_blank" rel="noopener">popitem()</a>随机返回并删除字典中的一对键和值(一般删除末尾对)。</td></tr></tbody></table><p>字典是支持无限极嵌套的，如下面代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cities=&#123;</span><br><span class="line">    <span class="string">'北京'</span>:&#123;</span><br><span class="line">        <span class="string">'朝阳'</span>:[<span class="string">'国贸'</span>,<span class="string">'CBD'</span>,<span class="string">'天阶'</span>,<span class="string">'我爱我家'</span>,<span class="string">'链接地产'</span>],</span><br><span class="line">        <span class="string">'海淀'</span>:[<span class="string">'圆明园'</span>,<span class="string">'苏州街'</span>,<span class="string">'中关村'</span>,<span class="string">'北京大学'</span>],</span><br><span class="line">        <span class="string">'昌平'</span>:[<span class="string">'沙河'</span>,<span class="string">'南口'</span>,<span class="string">'小汤山'</span>,],</span><br><span class="line">        <span class="string">'怀柔'</span>:[<span class="string">'桃花'</span>,<span class="string">'梅花'</span>,<span class="string">'大山'</span>],</span><br><span class="line">        <span class="string">'密云'</span>:[<span class="string">'密云A'</span>,<span class="string">'密云B'</span>,<span class="string">'密云C'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'河北'</span>:&#123;</span><br><span class="line">        <span class="string">'石家庄'</span>:[<span class="string">'石家庄A'</span>,<span class="string">'石家庄B'</span>,<span class="string">'石家庄C'</span>,<span class="string">'石家庄D'</span>,<span class="string">'石家庄E'</span>],</span><br><span class="line">        <span class="string">'张家口'</span>:[<span class="string">'张家口A'</span>,<span class="string">'张家口B'</span>,<span class="string">'张家口C'</span>],</span><br><span class="line">        <span class="string">'承德'</span>:[<span class="string">'承德A'</span>,<span class="string">'承德B'</span>,<span class="string">'承德C'</span>,<span class="string">'承德D'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用如下方法进行列出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cities[<span class="string">'北京'</span>]:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p>将列出如下结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">朝阳</span><br><span class="line">海淀</span><br><span class="line">昌平</span><br><span class="line">怀柔</span><br><span class="line">密云</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cities[<span class="string">'北京'</span>][<span class="string">'海淀'</span>]:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p>输出如下结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">圆明园</span><br><span class="line">苏州街</span><br><span class="line">中关村</span><br><span class="line">北京大学</span><br></pre></td></tr></table></figure><h1 id="Python3-运算符"><a href="#Python3-运算符" class="headerlink" title="Python3 运算符"></a>Python3 运算符</h1><table><thead><tr><th>**=</th><th>幂赋值运算符</th><th>c <strong>= a 等效于 c = c </strong> a</th></tr></thead><tbody><tr><td>//=</td><td>取整除赋值运算符</td><td>c //= a 等效于 c = c // a</td></tr></tbody></table><h2 id="Python成员运算符"><a href="#Python成员运算符" class="headerlink" title="Python成员运算符"></a>Python成员运算符</h2><p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的序列中找到值返回 True，否则返回 False。</td><td>x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td></tr><tr><td>not in</td><td>如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td>x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td></tr></tbody></table><h2 id="Python身份运算符"><a href="#Python身份运算符" class="headerlink" title="Python身份运算符"></a>Python身份运算符</h2><p>身份运算符用于比较两个对象的存储单元</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>is</td><td>is 是判断两个标识符是不是引用自一个对象</td><td><strong>x is y</strong>, 类似 <strong>id(x) == id(y)</strong> , 如果引用的是同一个对象则返回 True，否则返回 False</td></tr><tr><td>is not</td><td>is not 是判断两个标识符是不是引用自不同对象</td><td><strong>x is not y</strong> ， 类似 <strong>id(a) != id(b)</strong>。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td></tr></tbody></table><p><strong>注：</strong> <a href="http://www.runoob.com/python/python-func-id.html" target="_blank" rel="noopener">id()</a> 函数用于获取对象内存地址。</p><p><strong>s 与 == 区别：</strong></p><p><strong>is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。</strong></p><h1 id="Python3-数字-Number"><a href="#Python3-数字-Number" class="headerlink" title="Python3 数字(Number)"></a>Python3 数字(Number)</h1><h2 id="Python-数字类型转换"><a href="#Python-数字类型转换" class="headerlink" title="Python 数字类型转换"></a>Python 数字类型转换</h2><p>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</p><ul><li><p><strong>int(x)</strong> 将x转换为一个整数。</p></li><li><p><strong>float(x)</strong> 将x转换到一个浮点数。</p></li><li><p><strong>complex(x)</strong> 将x转换到一个复数，实数部分为 x，虚数部分为 0。</p></li><li><p><strong>complex(x, y)</strong> 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式。</p></li><li><p><strong>变量在使用前必须先”定义”（即赋予变量一个值）</strong></p><h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><p>| 函数                                                         | 返回值 ( 描述 )                                              |<br>| ———————————————————— | ———————————————————— |<br>| <a href="http://www.runoob.com/python3/python3-func-number-abs.html" target="_blank" rel="noopener">abs(x)</a> | 返回数字的绝对值，如abs(-10) 返回 10                         |<br>| <a href="http://www.runoob.com/python3/python3-func-number-ceil.html" target="_blank" rel="noopener">ceil(x)</a> | 返回数字的上入整数，如math.ceil(4.1) 返回 5                  |<br>| cmp(x, y)                                                    | 如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1。 <strong>Python 3 已废弃</strong> 。使用 <strong>使用 (x&gt;y)-(x&lt;y)</strong> 替换。 |<br>| <a href="http://www.runoob.com/python3/python3-func-number-exp.html" target="_blank" rel="noopener">exp(x)</a> | 返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045         |<br>| <a href="http://www.runoob.com/python3/python3-func-number-fabs.html" target="_blank" rel="noopener">fabs(x)</a> | 返回数字的绝对值，如math.fabs(-10) 返回10.0                  |<br>| <a href="http://www.runoob.com/python3/python3-func-number-floor.html" target="_blank" rel="noopener">floor(x)</a> | 返回数字的下舍整数，如math.floor(4.9)返回 4                  |<br>| <a href="http://www.runoob.com/python3/python3-func-number-log.html" target="_blank" rel="noopener">log(x)</a> | 如math.log(math.e)返回1.0,math.log(100,10)返回2.0            |<br>| <a href="http://www.runoob.com/python3/python3-func-number-log10.html" target="_blank" rel="noopener">log10(x)</a> | 返回以10为基数的x的对数，如math.log10(100)返回 2.0           |<br>| <a href="http://www.runoob.com/python3/python3-func-number-max.html" target="_blank" rel="noopener">max(x1, x2,…)</a> | 返回给定参数的最大值，参数可以为序列。                       |<br>| <a href="http://www.runoob.com/python3/python3-func-number-min.html" target="_blank" rel="noopener">min(x1, x2,…)</a> | 返回给定参数的最小值，参数可以为序列。                       |<br>| <a href="http://www.runoob.com/python3/python3-func-number-modf.html" target="_blank" rel="noopener">modf(x)</a> | 返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。 |<br>| <a href="http://www.runoob.com/python3/python3-func-number-pow.html" target="_blank" rel="noopener">pow(x, y)</a> | x**y 运算后的值。                                            |<br>| <a href="http://www.runoob.com/python3/python3-func-number-round.html" target="_blank" rel="noopener">round(x [,n])</a> | 返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。 |<br>| <a href="http://www.runoob.com/python3/python3-func-number-sqrt.html" target="_blank" rel="noopener">sqrt(x)</a> | 返回数字x的平方根。                                          |</p><h2 id="随机数函数"><a href="#随机数函数" class="headerlink" title="随机数函数"></a>随机数函数</h2><p>随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性。</p><p>Python包含以下常用随机数函数：</p><p>| 函数                                                         | 描述                                                         |<br>| ———————————————————— | ———————————————————— |<br>| <a href="http://www.runoob.com/python3/python3-func-number-choice.html" target="_blank" rel="noopener">choice(seq)</a> | 从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。 |<br>| <a href="http://www.runoob.com/python3/python3-func-number-randrange.html" target="_blank" rel="noopener">randrange ([start,] stop [,step])</a> | 从指定范围内，按指定基数递增的集合中获取一个随机数，基数缺省值为1 |<br>| <a href="http://www.runoob.com/python3/python3-func-number-random.html" target="_blank" rel="noopener">random()</a> | 随机生成下一个实数，它在[0,1)范围内。                        |<br>| <a href="http://www.runoob.com/python3/python3-func-number-seed.html" target="_blank" rel="noopener">seed([x])</a> | 改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。 |<br>| <a href="http://www.runoob.com/python3/python3-func-number-shuffle.html" target="_blank" rel="noopener">shuffle(lst)</a> | 将序列的所有元素随机排序                                     |<br>| <a href="http://www.runoob.com/python3/python3-func-number-uniform.html" target="_blank" rel="noopener">uniform(x, y)</a> | 随机生成下一个实数，它在[x,y]范围内。                        |</p><h2 id="数学常量"><a href="#数学常量" class="headerlink" title="数学常量"></a>数学常量</h2><p>| 常量 | 描述                                  |<br>| —- | ————————————- |<br>| pi   | 数学常量 pi（圆周率，一般以π来表示）  |<br>| e    | 数学常量 e，e即自然常数（自然常数）。 |</p></li></ul><h1 id="Python3-条件控制"><a href="#Python3-条件控制" class="headerlink" title="Python3 条件控制"></a>Python3 条件控制</h1><p>Python 中用 <strong>elif</strong> 代替了 <strong>else if</strong>，所以if语句的关键字为：<strong>if – elif – else</strong>。</p><p><strong>注意：</strong></p><ul><li><p>1、每个条件后面要使用冒号（:），表示接下来是满足条件后要执行的语句块。</p></li><li><p>2、使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块。</p></li><li><p>3、在Python中没有switch – case语句。</p><p><strong>下面请记住</strong>:warning:</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 程序演示了 == 操作符</span></span><br><span class="line"><span class="comment"># 使用数字</span></span><br><span class="line">print(<span class="number">5</span> == <span class="number">6</span>)</span><br><span class="line"><span class="comment"># 使用变量</span></span><br><span class="line">x = <span class="number">5</span></span><br><span class="line">y = <span class="number">8</span></span><br><span class="line">print(x == y)</span><br></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><h2 id="if-嵌套"><a href="#if-嵌套" class="headerlink" title="if 嵌套"></a>if 嵌套</h2><p>在嵌套 if 语句中，可以把 if…elif…else 结构放在另外一个 if…elif…else 结构中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式<span class="number">1</span>:</span><br><span class="line">    语句</span><br><span class="line">    <span class="keyword">if</span> 表达式<span class="number">2</span>:</span><br><span class="line">        语句</span><br><span class="line">    <span class="keyword">elif</span> 表达式<span class="number">3</span>:</span><br><span class="line">        语句</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        语句</span><br><span class="line"><span class="keyword">elif</span> 表达式<span class="number">4</span>:</span><br><span class="line">    语句</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    语句</span><br></pre></td></tr></table></figure><h2 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h2><p>Python中的三元表达式可以将if-else语句放到一行里。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value = true-expr <span class="keyword">if</span> condition <span class="keyword">else</span> false-expr</span><br></pre></td></tr></table></figure><p><code>true-expr</code>或<code>false-expr</code>可以是任何Python代码。它和下面的代码效果相同：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition:</span><br><span class="line">    value = true-expr</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    value = false-expr</span><br></pre></td></tr></table></figure><p>下面是一个更具体的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">126</span>]: x = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">127</span>]: <span class="string">'Non-negative'</span> <span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">else</span> <span class="string">'Negative'</span></span><br><span class="line">Out[<span class="number">127</span>]: <span class="string">'Non-negative'</span></span><br></pre></td></tr></table></figure><p>和if-else一样，只有一个表达式会被执行。因此，三元表达式中的if和else可以包含大量的计算，但只有True的分支会被执行。</p><p>虽然使用三元表达式可以压缩代码，但会降低代码可读性。</p><h1 id="Python3-循环语句"><a href="#Python3-循环语句" class="headerlink" title="Python3 循环语句"></a>Python3 循环语句</h1><h2 id="while-循环使用-else-语句"><a href="#while-循环使用-else-语句" class="headerlink" title="while 循环使用 else 语句"></a>while 循环使用 else 语句</h2><p>在 while … else 在条件语句为 false 时执行 else 的语句块：</p><h2 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h2><p>Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串</p><h2 id="range-函数"><a href="#range-函数" class="headerlink" title="range()函数"></a>range()函数</h2><p>如果你需要遍历数字序列，可以使用内置range()函数。它会生成数列，例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;for i in range(5):</span><br><span class="line">...     print(i)</span><br><span class="line">...</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>你也可以使用range指定区间的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>,<span class="number">9</span>) :</span><br><span class="line">    print(i)</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>也可以使range以指定数字开始并指定不同的增量(甚至可以是负数，有时这也叫做’步长’):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>, <span class="number">3</span>) :</span><br><span class="line">    print(i)</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>您可以结合range()和len()函数以遍历一个序列的索引,如下所示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = [<span class="string">'Google'</span>, <span class="string">'Baidu'</span>, <span class="string">'Runoob'</span>, <span class="string">'Taobao'</span>, <span class="string">'QQ'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line"><span class="meta">... </span>    print(i, a[i])</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">0</span> Google</span><br><span class="line"><span class="number">1</span> Baidu</span><br><span class="line"><span class="number">2</span> Runoob</span><br><span class="line"><span class="number">3</span> Taobao</span><br><span class="line"><span class="number">4</span> QQ</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>还可以使用range()函数来创建一个列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;list(range(<span class="number">5</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>循环语句可以有 else 子句，它在穷尽列表(以for循环)或条件变为 false (以while循环)导致循环终止时被执行,但循环被break终止时不执行。</p><p>如下实例用于查询质数的循环例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>, n):</span><br><span class="line">        <span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line">            print(n, <span class="string">'等于'</span>, x, <span class="string">'*'</span>, n//x)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 循环中没有找到元素</span></span><br><span class="line">        print(n, <span class="string">' 是质数'</span>)</span><br></pre></td></tr></table></figure><p>执行以上脚本输出结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>  是质数</span><br><span class="line"><span class="number">3</span>  是质数</span><br><span class="line"><span class="number">4</span> 等于 <span class="number">2</span> * <span class="number">2</span></span><br><span class="line"><span class="number">5</span>  是质数</span><br><span class="line"><span class="number">6</span> 等于 <span class="number">2</span> * <span class="number">3</span></span><br><span class="line"><span class="number">7</span>  是质数</span><br><span class="line"><span class="number">8</span> 等于 <span class="number">2</span> * <span class="number">4</span></span><br><span class="line"><span class="number">9</span> 等于 <span class="number">3</span> * <span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="pass-语句"><a href="#pass-语句" class="headerlink" title="pass 语句"></a>pass 语句</h2><p>Python pass是空语句，是为了保持程序结构的完整性。</p><p>pass 不做任何事情，一般用做占位语句Python3 迭代器与生成器</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代是Python最强大的功能之一，是访问集合元素的一种方式。</p><p>迭代器是一个可以记住遍历的位置的对象。</p><p>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p><p>迭代器有两个基本的方法：<strong>iter()</strong> 和 <strong>next()</strong>。</p><p>字符串，列表或元组对象都可用于创建迭代器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>it = iter(list)    <span class="comment"># 创建迭代器对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (next(it))   <span class="comment"># 输出迭代器的下一个元素</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (next(it))</span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>迭代器对象可以使用常规for语句进行遍历：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line">list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">it = iter(list)    <span class="comment"># 创建迭代器对象</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> it:</span><br><span class="line">    <span class="keyword">print</span> (x, end=<span class="string">" "</span>)</span><br></pre></td></tr></table></figure><p>执行以上程序，输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p>也可以使用 next() 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys         <span class="comment"># 引入 sys 模块</span></span><br><span class="line"> </span><br><span class="line">list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">it = iter(list)    <span class="comment"># 创建迭代器对象</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">print</span> (next(it))</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure><p>执行以上程序，输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>在 Python 中，使用了 yield 的函数被称为生成器（generator）。</p><p>跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。</p><p>在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。</p><p>调用一个生成器函数，返回的是一个迭代器对象。</p><p>以下实例使用 yield 实现斐波那契数列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">(n)</span>:</span> <span class="comment"># 生成器函数 - 斐波那契</span></span><br><span class="line">    a, b, counter = <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> (counter &gt; n): </span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">f = fibonacci(<span class="number">10</span>) <span class="comment"># f 是一个迭代器，由生成器返回生成</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">print</span> (next(f), end=<span class="string">" "</span>)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure><p>执行以上程序，输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span> <span class="number">55</span></span><br></pre></td></tr></table></figure><h1 id="Python3-函数"><a href="#Python3-函数" class="headerlink" title="Python3 函数"></a>Python3 函数</h1><p>你可以定义一个由自己想要功能的函数，以下是简单的规则：</p><ul><li><p>函数代码块以 <strong>def</strong> 关键词开头，后接函数标识符名称和圆括号 <strong>()</strong>。</p></li><li><p>任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。</p></li><li><p>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</p></li><li><p>函数内容以冒号起始，并且缩进。</p></li><li><p><strong>return [表达式]</strong> 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</p></li><li><p>Python 定义函数使用 def 关键字，一般格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名（参数列表）:</span></span><br><span class="line">    函数体</span><br></pre></td></tr></table></figure></li></ul><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p><strong>当你将对象作为参数传递给函数时，新的局域变量创建了对原始对象的引用，而不是复制</strong>。如果在函数里绑定一个新对象到一个变量，这个变动不会反映到上一层。因此可以改变可变参数的内容。假设有以下函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">append_element</span><span class="params">(some_list, element)</span>:</span></span><br><span class="line">    some_list.append(element)</span><br></pre></td></tr></table></figure><p>然后有：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">27</span>]: data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: append_element(data, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: data</span><br><span class="line">Out[<span class="number">29</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>在 python 中，类型属于对象，变量是没有类型的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">a=<span class="string">"Runoob"</span></span><br></pre></td></tr></table></figure><p>以上代码中，<strong>[1,2,3]</strong> 是 List 类型，<strong>“Runoob”</strong> 是 String 类型，而变量 a 是没有类型，她仅仅是一个对象的引用（一个指针），可以是指向 List 类型对象，也可以是指向 String 类型对象。</p><h2 id="鸭子类型"><a href="#鸭子类型" class="headerlink" title="鸭子类型"></a>鸭子类型</h2><p>经常地，你可能不关心对象的类型，只关心对象是否有某些方法或用途。这通常被称为“鸭子类型”，来自“走起来像鸭子、叫起来像鸭子，那么它就是鸭子”的说法。例如，你可以通过验证一个对象是否遵循迭代协议，判断它是可迭代的。对于许多对象，这意味着它有一个<code>__iter__</code>魔术方法，其它更好的判断方法是使用<code>iter</code>函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isiterable</span><span class="params">(obj)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        iter(obj)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">except</span> TypeError: <span class="comment"># not iterable</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>这个函数会返回字符串以及大多数Python集合类型为<code>True</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">29</span>]: isiterable(<span class="string">'a string'</span>)</span><br><span class="line">Out[<span class="number">29</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: isiterable([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">Out[<span class="number">30</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: isiterable(<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">31</span>]: <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>我总是用这个功能编写可以接受多种输入类型的函数。常见的例子是编写一个函数可以接受任意类型的序列（list、tuple、ndarray）或是迭代器。你可先检验对象是否是列表（或是NUmPy数组），如果不是的话，将其转变成列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> isinstance(x, list) <span class="keyword">and</span> isiterable(x):</span><br><span class="line">    x = list(x)</span><br></pre></td></tr></table></figure><h2 id="重点-warning-可更改-mutable-与不可更改-immutable-对象"><a href="#重点-warning-可更改-mutable-与不可更改-immutable-对象" class="headerlink" title="(重点:warning:)可更改(mutable)与不可更改(immutable)对象"></a>(重点:warning:)可更改(mutable)与不可更改(immutable)对象</h2><p>:point_down:</p><p>在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。</p><ul><li><strong>不可变类型：</strong>变量赋值 <strong>a=5</strong> 后再赋值 <strong>a=10</strong>，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变a的值，相当于新生成了a。</li><li><strong>可变类型：</strong>变量赋值 <strong>la=[1,2,3,4]</strong> 后再赋值 <strong>la[2]=5</strong> 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。</li></ul><p>python 函数的参数传递：</p><ul><li><strong>不可变类型：</strong>类似 c++ 的值传递，如 整数、字符串、元组。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。</li><li><strong>可变类型：</strong>类似 c++ 的引用传递，如 列表，字典。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响</li></ul><p><strong>python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。</strong></p><h3 id="python-传不可变对象实例"><a href="#python-传不可变对象实例" class="headerlink" title="python 传不可变对象实例"></a>python 传不可变对象实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ChangeInt</span><span class="params">( a )</span>:</span></span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">ChangeInt(b)</span><br><span class="line">print( b ) <span class="comment"># 结果是 2</span></span><br></pre></td></tr></table></figure><p>实例中有 int 对象 2，指向它的变量是 b，在传递给 ChangeInt 函数时，按传值的方式复制了变量 b，a 和 b 都指向了同一个 Int 对象，在 a=10 时，则新生成一个 int 值对象 10，并让 a 指向它。</p><h3 id="传可变对象实例"><a href="#传可变对象实例" class="headerlink" title="传可变对象实例"></a>传可变对象实例</h3><p>可变对象在函数里修改了参数，那么在调用这个函数的函数里，原始的参数也被改变了。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 可写函数说明</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changeme</span><span class="params">( mylist )</span>:</span></span><br><span class="line">   <span class="string">"修改传入的列表"</span></span><br><span class="line">   mylist.append([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"函数内取值: "</span>, mylist)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用changeme函数</span></span><br><span class="line">mylist = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>];</span><br><span class="line">changeme( mylist );</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"函数外取值: "</span>, mylist)</span><br></pre></td></tr></table></figure><p>传入函数的和在末尾添加新内容的对象用的是同一个引用。故输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数内取值:  [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">函数外取值:  [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]]</span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>以下是调用函数时可使用的正式参数类型：</p><ul><li><p>必需参数</p></li><li><p>关键字参数</p></li><li><p>默认参数</p></li><li><p>不定长参数</p></li><li><h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><p>关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。</p><p>使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。</p><p>以下实例在函数 printme() 调用时使用参数名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#可写函数说明</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printme</span><span class="params">( str )</span>:</span></span><br><span class="line">   <span class="string">"打印任何传入的字符串"</span></span><br><span class="line">   <span class="keyword">print</span> (str);</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#调用printme函数</span></span><br><span class="line">printme( str = <span class="string">"菜鸟教程"</span>);</span><br></pre></td></tr></table></figure></li></ul><p>以下实例中演示了函数参数的使用不需要使用指定顺序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#可写函数说明</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printinfo</span><span class="params">( name, age )</span>:</span></span><br><span class="line">   <span class="string">"打印任何传入的字符串"</span></span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"名字: "</span>, name);</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"年龄: "</span>, age);</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#调用printinfo函数</span></span><br><span class="line">printinfo( age=<span class="number">50</span>, name=<span class="string">"runoob"</span> );</span><br></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">名字:  runoob</span><br><span class="line">年龄:  <span class="number">50</span></span><br></pre></td></tr></table></figure><h3 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h3><p>你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述2种参数不同，声明时不会命名。基本语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">functionname</span><span class="params">([formal_args,] *var_args_tuple )</span>:</span></span><br><span class="line">   <span class="string">"函数_文档字符串"</span></span><br><span class="line">   function_suite</span><br><span class="line">   <span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure><p>加了星号（*）的变量名会存放所有未命名的变量参数。如果在函数调用时没有指定参数，它就是一个空元组。我们也可以不向函数传递未命名的变量。如下实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 可写函数说明</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printinfo</span><span class="params">( arg1, *vartuple )</span>:</span></span><br><span class="line">   <span class="string">"打印任何传入的参数"</span></span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"输出: "</span>)</span><br><span class="line">   <span class="keyword">print</span> (arg1)</span><br><span class="line">   <span class="keyword">for</span> var <span class="keyword">in</span> vartuple:</span><br><span class="line">      <span class="keyword">print</span> (var)</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用printinfo 函数</span></span><br><span class="line">printinfo( <span class="number">10</span> );</span><br><span class="line">printinfo( <span class="number">70</span>, <span class="number">60</span>, <span class="number">50</span> );</span><br></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输出:</span><br><span class="line"><span class="number">10</span></span><br><span class="line">输出:</span><br><span class="line"><span class="number">70</span></span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="number">50</span></span><br></pre></td></tr></table></figure><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>Python 中，程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的。</p><p>变量的作用域决定了在哪一部分程序可以访问哪个特定的变量名称。Python的作用域一共有4种，分别是：</p><ul><li>L （Local） 局部作用域</li><li>E （Enclosing） 闭包函数外的函数中</li><li>G （Global） 全局作用域</li><li>B （Built-in） 内建作用域</li></ul><p>以 L –&gt; E –&gt; G –&gt;B 的规则查找，即：在局部找不到，便会去局部外的局部找（例如闭包），再找不到就会去全局找，再者去内建中找。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = int(<span class="number">2.9</span>)  <span class="comment"># 内建作用域</span></span><br><span class="line"> </span><br><span class="line">g_count = <span class="number">0</span>  <span class="comment"># 全局作用域</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    o_count = <span class="number">1</span>  <span class="comment"># 闭包函数外的函数中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        i_count = <span class="number">2</span>  <span class="comment"># 局部作用域</span></span><br></pre></td></tr></table></figure><p>Python 中只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域，其它的代码块（如 if/elif/else/、try/except、for/while等）是不会引入新的作用域的，也就是说这些语句内定义的变量，外部也可以访问，如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="meta">... </span> msg = <span class="string">'I am from Runoob'</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>msg</span><br><span class="line"><span class="string">'I am from Runoob'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>实例中 msg 变量定义在 if 语句块中，但外部还是可以访问的。</p><p>如果将 msg 定义在函数中，则它就是局部变量，外部不能访问：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    msg_inner = <span class="string">'I am from Runoob'</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>msg_inner</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">'msg_inner'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>从报错的信息上看，说明了 msg_inner 未定义，无法使用，因为它是局部变量，只有在函数内可以使用。</p><h3 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h3><p>定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域。</p><p>局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。调用函数时，所有在函数内声明的变量名称都将被加入到作用域中。如下实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line">total = <span class="number">0</span>; <span class="comment"># 这是一个全局变量</span></span><br><span class="line"><span class="comment"># 可写函数说明</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">( arg1, arg2 )</span>:</span></span><br><span class="line">    <span class="comment">#返回2个参数的和."</span></span><br><span class="line">    total = arg1 + arg2; <span class="comment"># total在这里是局部变量.</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"函数内是局部变量 : "</span>, total)</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用sum函数</span></span><br><span class="line">sum( <span class="number">10</span>, <span class="number">20</span> );</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"函数外是全局变量 : "</span>, total)</span><br></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数内是局部变量 :  <span class="number">30</span></span><br><span class="line">函数外是全局变量 :  <span class="number">0</span></span><br></pre></td></tr></table></figure><p>如果要修改嵌套作用域（enclosing 作用域，外层非全局作用域）中的变量则需要 nonlocal 关键字了，如下实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    num = <span class="number">10</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> num   <span class="comment"># nonlocal关键字声明</span></span><br><span class="line">        num = <span class="number">100</span></span><br><span class="line">        print(num)</span><br><span class="line">    inner()</span><br><span class="line">    print(num)</span><br><span class="line">outer()</span><br></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><p>另外有一种特殊情况，假设下面这段代码被运行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line">a = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    a = a + <span class="number">1</span></span><br><span class="line">    print(a)</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>以上程序执行，报错信息如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"test.py"</span>, line <span class="number">7</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    test()</span><br><span class="line">  File <span class="string">"test.py"</span>, line <span class="number">5</span>, <span class="keyword">in</span> test</span><br><span class="line">    a = a + <span class="number">1</span></span><br><span class="line">UnboundLocalError: local variable <span class="string">'a'</span> referenced before assignment</span><br></pre></td></tr></table></figure><p>错误信息为局部作用域引用错误，因为 test 函数中的 a 使用的是局部，未定义，无法修改。</p><h1 id="Python标准库：内置函数"><a href="#Python标准库：内置函数" class="headerlink" title="Python标准库：内置函数"></a>Python标准库：内置函数</h1><h2 id="any-iterable"><a href="#any-iterable" class="headerlink" title="any(iterable)"></a>any(iterable)</h2><p>如果可迭代的对象的所有元素中只要有一个元素为True就返回True，否则返回False。或者可迭代对象为空，也返回False。<strong>这个函数主要用来判断列表、元组、字典等对象是否有元素为True，提高计算速度</strong>，与之等效的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">any</span><span class="params">(iterable)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> element:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>例子：</p><p><strong>[python]</strong> <a href="https://blog.csdn.net/caimouse/article/details/40652697#" target="_blank" rel="noopener">view plain</a> <a href="https://blog.csdn.net/caimouse/article/details/40652697#" target="_blank" rel="noopener">copy</a></p><ol><li>#any()函数  </li><li>a = []  </li><li>b = {}  </li><li>c = (1, 3, 4)  </li><li>d = (None, 1, 3)  </li><li></li><li>print(‘a:’, any(a), ‘b:’, any(b), ‘c:’, any(c), ‘d:’, any(d))  </li></ol><p>输出结果如下：</p><p>a: False b: False c: True d: True</p><h2 id="python-bytes和str两种类型转换的函数encode-decode"><a href="#python-bytes和str两种类型转换的函数encode-decode" class="headerlink" title="python bytes和str两种类型转换的函数encode(),decode()"></a>python bytes和str两种类型转换的函数<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000" target="_blank" rel="noopener">encode(),decode()</a></h2><ul><li>str通过encode()方法可以编码为指定的bytes</li><li>反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes。要把bytes变为str，就需要用decode()方法：</li></ul><h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><p>socket.send（bytes [，flags]） </p><p>socket.recv（bufsize [，flags]） </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python3基础语法：&quot;&gt;&lt;a href=&quot;#python3基础语法：&quot; class=&quot;headerlink&quot; title=&quot;python3基础语法：&quot;&gt;&lt;/a&gt;python3基础语法：&lt;/h1&gt;&lt;h2 id=&quot;标识符（当时学c语言时也没注意）😢&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="Python3" scheme="http://WSCZou.com/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>Splash使用</title>
    <link href="http://WSCZou.com/2018/04/10/Splash%E4%BD%BF%E7%94%A8/"/>
    <id>http://WSCZou.com/2018/04/10/Splash使用/</id>
    <published>2018-04-10T03:10:18.000Z</published>
    <updated>2018-04-12T09:37:36.625Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么有splash"><a href="#为什么有splash" class="headerlink" title="为什么有splash"></a>为什么有splash</h2><p>为了更加有效的制作网页爬虫,由于目前很多的网页通过javascript模式进行交互,简单的爬取网页模式无法胜任javascript页面的生成和ajax网页的爬取,同时通过分析连接请求的方式来落实局部连接数据请求,相对比较复杂,尤其是对带有特定时间戳算法的页面,分析难度较大,效率不高。而通过调用浏览器模拟页面动作模式,需要使用浏览器,无法实现异步和大规模爬取需求。鉴于上述理由Splash也就有了用武之地。一个页面渲染服务器,返回渲染后的页面,便于爬取,便于规模应用</p><h2 id="splash-lua脚本"><a href="#splash-lua脚本" class="headerlink" title="splash lua脚本"></a>splash lua脚本</h2><p>Splash是通过Lua脚本来控制了页面的加载过程的，加载过程完全模拟浏览器，最后可返回各种格式的结果，如网页源码和截图等。</p><h2 id="Splash对象属性"><a href="#Splash对象属性" class="headerlink" title="Splash对象属性"></a>Splash对象属性</h2><h3 id="1args"><a href="#1args" class="headerlink" title="1args"></a>1<code>args</code></h3><p>该属性可以获取加载时配置的参数，比如URL</p><h3 id="2-js-enabled"><a href="#2-js-enabled" class="headerlink" title="2.js_enabled"></a>2.<code>js_enabled</code></h3><p>这个属性是Splash的JavaScript执行开关，可以将其配置为<code>true</code>或<code>false</code>来控制是否执行JavaScript代码，默认为<code>true</code></p><h3 id="3-resource-timeout"><a href="#3-resource-timeout" class="headerlink" title="3.resource_timeout"></a>3.<code>resource_timeout</code></h3><p>此属性可以设置加载的超时时间，单位是秒。如果设置为0或<code>nil</code>（类似Python中的<code>None</code>），代表不检测超时</p><h3 id="4-images-enabled"><a href="#4-images-enabled" class="headerlink" title="4.images_enabled"></a>4.<code>images_enabled</code></h3><p>此属性可以设置图片是否加载，默认情况下是加载的。禁用该属性后，可以节省网络流量并提高网页加载速度。但是需要注意的是，禁用图片加载可能会影响JavaScript渲染。因为禁用图片之后，它的外层DOM节点的高度会受影响，进而影响DOM节点的位置。因此，如果JavaScript对图片节点有操作的话，其执行就会受到影响。另外值得注意的是，Splash使用了缓存。如果一开始加载出来了网页图片，然后禁用了图片加载，再重新加载页面，之前加载好的图片可能还会显示出来，这时直接重启Splash即可。</p><h3 id="5-plugins-enabled"><a href="#5-plugins-enabled" class="headerlink" title="5.plugins_enabled"></a>5.<code>plugins_enabled</code></h3><p>此属性可以控制浏览器插件（如Flash插件）是否开启。默认情况下，此属性是<code>false</code>，表示不开启。</p><h3 id="6-scroll-position"><a href="#6-scroll-position" class="headerlink" title="6.scroll_position"></a>6.<code>scroll_position</code></h3><p>通过设置此属性，我们可以控制页面上下或左右滚动。</p><h2 id="Splash对象的方法"><a href="#Splash对象的方法" class="headerlink" title="Splash对象的方法"></a>Splash对象的方法</h2><h3 id="1-go"><a href="#1-go" class="headerlink" title="1.go()"></a>1.<code>go()</code></h3><p>该方法用来请求某个链接，而且它可以模拟GET和POST请求，同时支持传入请求头、表单等数据</p><h3 id="2-wait"><a href="#2-wait" class="headerlink" title="2.wait()"></a>2.<code>wait()</code></h3><p>此方法可以控制页面的等待时间</p><h3 id="3-jsfunc"><a href="#3-jsfunc" class="headerlink" title="3.jsfunc()"></a>3.<code>jsfunc()</code></h3><p>此方法可以直接调用JavaScript定义的方法，但是所调用的方法需要用双中括号包围，这相当于实现了JavaScript方法到Lua脚本的转换。</p><h3 id="4-evaljs"><a href="#4-evaljs" class="headerlink" title="4.evaljs()"></a>4.<code>evaljs()</code></h3><p>此方法可以执行JavaScript代码并返回最后一条JavaScript语句的返回结果</p><h3 id="5-runjs"><a href="#5-runjs" class="headerlink" title="5.runjs()"></a>5.<code>runjs()</code></h3><p>此方法可以执行JavaScript代码，它与<code>evaljs()</code>的功能类似，但是更偏向于执行某些动作或声明某些方法</p><h3 id="6-autoload"><a href="#6-autoload" class="headerlink" title="6.autoload()"></a>6.<code>autoload()</code></h3><p>此方法可以设置每个页面访问时自动加载的对象.但是此方法只负责加载JavaScript代码或库，不执行任何操作。如果要执行操作，可以调用<code>evaljs()</code>或<code>runjs()</code>方法。</p><h3 id="7-call-later"><a href="#7-call-later" class="headerlink" title="7.call_later()"></a>7.<code>call_later()</code></h3><p>此方法可以通过设置定时任务和延迟时间来实现任务延时执行，并且可以在执行前通过<code>cancel()</code>方法重新执行定时任务。</p><h3 id="8-http-get"><a href="#8-http-get" class="headerlink" title="8.http_get()"></a>8.<code>http_get()</code></h3><p>此方法可以模拟发送HTTP的GET请求</p><h3 id="9-http-post"><a href="#9-http-post" class="headerlink" title="9.http_post()"></a>9.<code>http_post()</code></h3><p>和<code>http_get()</code>方法类似，此方法用来模拟发送POST请求，不过多了一个参数<code>body</code></p><h3 id="10-set-content"><a href="#10-set-content" class="headerlink" title="10.set_content()"></a>10.<code>set_content()</code></h3><p>此方法用来设置页面的内容</p><h3 id="11-html"><a href="#11-html" class="headerlink" title="11.html()"></a>11.<code>html()</code></h3><p>此方法用来获取网页的源代码，它是非常简单又常用的方法</p><h3 id="12-png"><a href="#12-png" class="headerlink" title="12.png()"></a>12.<code>png()</code></h3><p>此方法用来获取PNG格式的网页截图</p><h3 id="13-jpeg"><a href="#13-jpeg" class="headerlink" title="13.jpeg()"></a>13.<code>jpeg()</code></h3><p>此方法用来获取JPEG格式的网页截图</p><h3 id="14-har"><a href="#14-har" class="headerlink" title="14.har()"></a>14.<code>har()</code></h3><p>此方法用来获取页面加载过程描述</p><h3 id="15-url"><a href="#15-url" class="headerlink" title="15.url()"></a>15.<code>url()</code></h3><p>此方法可以获取当前正在访问的URL</p><h3 id="16-get-cookies"><a href="#16-get-cookies" class="headerlink" title="16.get_cookies()"></a>16.<code>get_cookies()</code></h3><p>此方法可以获取当前页面的Cookies</p><h3 id="17-add-cookie"><a href="#17-add-cookie" class="headerlink" title="17.add_cookie()"></a>17.<code>add_cookie()</code></h3><p>此方法可以为当前页面添加Cookie</p><h3 id="18-clear-cookies"><a href="#18-clear-cookies" class="headerlink" title="18.clear_cookies()"></a>18.<code>clear_cookies()</code></h3><p>此方法可以清除所有的Cookies</p><h3 id="19-get-viewport-size"><a href="#19-get-viewport-size" class="headerlink" title="19.get_viewport_size()"></a>19.<code>get_viewport_size()</code></h3><p>此方法可以获取当前浏览器页面的大小，即宽高</p><h3 id="20-set-viewport-size"><a href="#20-set-viewport-size" class="headerlink" title="20.set_viewport_size()"></a>20.<code>set_viewport_size()</code></h3><p>此方法可以设置当前浏览器页面的大小，即宽高</p><h3 id="21-set-viewport-full"><a href="#21-set-viewport-full" class="headerlink" title="21.set_viewport_full()"></a>21.<code>set_viewport_full()</code></h3><p>此方法可以设置浏览器全屏显示</p><h3 id="22-set-user-agent"><a href="#22-set-user-agent" class="headerlink" title="22.set_user_agent()"></a>22.<code>set_user_agent()</code></h3><p>此方法可以设置浏览器的<code>User-Agent</code></p><h3 id="23-set-custom-headers"><a href="#23-set-custom-headers" class="headerlink" title="23.set_custom_headers()"></a>23.<code>set_custom_headers()</code></h3><p>此方法可以设置请求头</p><h3 id="24-select"><a href="#24-select" class="headerlink" title="24.select()"></a>24.<code>select()</code></h3><p>该方法可以选中符合条件的第一个节点，如果有多个节点符合条件，则只会返回一个，其参数是CSS选择器。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash)</span></span></span><br><span class="line">  splash:go(<span class="string">"https://www.baidu.com/"</span>)</span><br><span class="line">  <span class="built_in">input</span> = splash:<span class="built_in">select</span>(<span class="string">"#kw"</span>)</span><br><span class="line">  <span class="built_in">input</span>:send_text(<span class="string">'Splash'</span>)</span><br><span class="line">  splash:wait(<span class="number">3</span>)</span><br><span class="line">  <span class="keyword">return</span> splash:png()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这里我们首先访问了百度，然后选中了搜索框，随后调用了<code>send_text()</code>方法填写了文本，然后返回网页截图我们成功在输入框中输入了Splash</p><h3 id="25-select-all"><a href="#25-select-all" class="headerlink" title="25.select_all()"></a>25.<code>select_all()</code></h3><p>此方法可以选中所有符合条件的节点，其参数是CSS选择器</p><h3 id="26-mouse-click"><a href="#26-mouse-click" class="headerlink" title="26.mouse_click()"></a>26.<code>mouse_click()</code></h3><p>此方法可以模拟鼠标点击操作，传入的参数为坐标值<code>x</code>和<code>y</code>。此外，也可以直接选中某个节点，然后调用此方法</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash)</span></span></span><br><span class="line">  splash:go(<span class="string">"https://www.baidu.com/"</span>)</span><br><span class="line">  <span class="built_in">input</span> = splash:<span class="built_in">select</span>(<span class="string">"#kw"</span>)</span><br><span class="line">  <span class="built_in">input</span>:send_text(<span class="string">'Splash'</span>)</span><br><span class="line">  submit = splash:<span class="built_in">select</span>(<span class="string">'#su'</span>)</span><br><span class="line">  submit:mouse_click()</span><br><span class="line">  splash:wait(<span class="number">3</span>)</span><br><span class="line">  <span class="keyword">return</span> splash:png()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这里我们首先选中页面的输入框，输入了文本，然后选中“提交”按钮，调用了<code>mouse_click()</code>方法提交查询，然后页面等待三秒，返回截图，这里我们成功获取了查询后的页面内容，模拟了百度搜索操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么有splash&quot;&gt;&lt;a href=&quot;#为什么有splash&quot; class=&quot;headerlink&quot; title=&quot;为什么有splash&quot;&gt;&lt;/a&gt;为什么有splash&lt;/h2&gt;&lt;p&gt;为了更加有效的制作网页爬虫,由于目前很多的网页通过javascript模式进
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://WSCZou.com/2018/04/09/hello-world/"/>
    <id>http://WSCZou.com/2018/04/09/hello-world/</id>
    <published>2018-04-09T02:12:10.670Z</published>
    <updated>2018-04-09T02:12:10.670Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
